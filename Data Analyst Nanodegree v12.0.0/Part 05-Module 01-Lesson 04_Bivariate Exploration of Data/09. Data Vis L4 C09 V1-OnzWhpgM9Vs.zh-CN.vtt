WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.904
我们来绘制两个分类变量之间的关系

00:00:03.904 --> 00:00:07.244
汽车类型和汽车传动系统类型

00:00:07.245 --> 00:00:10.780
为了叙述方便 我只研究两种主要类型

00:00:10.779 --> 00:00:16.339
即列 trans_type 里记录的自动和手动型

00:00:16.339 --> 00:00:18.190
要绘制数据

00:00:18.190 --> 00:00:20.589
我们可以用之前见过的热图

00:00:20.589 --> 00:00:22.859
实际上 seaborn 有个函数可以创建

00:00:22.859 --> 00:00:26.579
分类变量的热图 即函数 heatmap

00:00:26.579 --> 00:00:29.379
但这个函数以

00:00:29.379 --> 00:00:33.234
一个由绘制数值组成的二维数组或 DataFrame 为参数

00:00:33.234 --> 00:00:35.929
这就意味着我们要先汇总数据

00:00:35.929 --> 00:00:38.820
之后才能创建图表

00:00:38.820 --> 00:00:42.890
首先 我用函数 groupby 和 size 来获取两个变量

00:00:42.890 --> 00:00:47.399
的各种类别组合及其对应的数量统计 并将其储存为 pandas Series

00:00:47.399 --> 00:00:53.074
接着 用 reset_index 将 Series 转换成 DataFrame 

00:00:53.075 --> 00:00:58.415
最后 用 pivot 重塑数据 以汽车类型为行

00:00:58.414 --> 00:01:00.185
传动系统类型为列

00:01:00.185 --> 00:01:02.164
将值写在单元格里

00:01:02.164 --> 00:01:04.420
现在可以绘制了

00:01:04.420 --> 00:01:07.045
效果不怎么样

00:01:07.045 --> 00:01:09.670
因为单从颜色上看

00:01:09.670 --> 00:01:12.439
我们很难比较传动系统的占比和数量统计

00:01:12.439 --> 00:01:15.745
除了自动比手动更流行之外

00:01:15.745 --> 00:01:18.704
其它信息都很难判断

00:01:18.704 --> 00:01:21.719
一种优化方法是 在单元格上标明统计值

00:01:21.719 --> 00:01:25.575
这样一来 图表看起来更像一个表格

00:01:25.575 --> 00:01:28.650
设参数 fmt 为 d

00:01:28.650 --> 00:01:32.395
从而确保所有数量统计都是十进制的

00:01:32.394 --> 00:01:34.719
我们也可以用分组条形图

00:01:34.719 --> 00:01:37.700
来体现数据的分布和数量统计情况

00:01:37.700 --> 00:01:39.850
上一章节已经介绍了

00:01:39.849 --> 00:01:44.459
如何用 seaborn 的函数 countplot 来生成单变量条形图

00:01:44.459 --> 00:01:47.140
要将各条形拆分成

00:01:47.140 --> 00:01:49.885
多个条形 以便表示不同的传动系统

00:01:49.885 --> 00:01:55.050
只需添加一个参数 hue 并为其赋值 trans_type 即可

00:01:55.049 --> 00:01:56.629
观察这个分组条形图

00:01:56.629 --> 00:01:59.170
不难发现微型车

00:01:59.170 --> 00:02:02.405
自动和手动传动系统的比例最接近

00:02:02.405 --> 00:02:05.670
而大型车的比例则相差最远

