WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.529
The point plot function you saw previously,

00:00:02.529 --> 00:00:06.855
was good for summarizing a quantitative variable against a qualitative variable.

00:00:06.855 --> 00:00:09.130
We need a different function for summarizing

00:00:09.130 --> 00:00:12.395
a quantitative variable against a second quantitative variable,

00:00:12.394 --> 00:00:15.884
such as with fuel efficiency by engine displacement.

00:00:15.884 --> 00:00:19.625
In this case, we'll make use of Matplotlib's error bar function,

00:00:19.625 --> 00:00:24.170
which plots a line between points with an optional setting for adding error bars.

00:00:24.170 --> 00:00:29.195
We can set the data X and Y arguments just like we've done before.

00:00:29.195 --> 00:00:33.149
Unfortunately, the plot we get out is uninformative.

00:00:33.149 --> 00:00:36.949
All that Matplotlib is doing is connecting each pair of X and Y

00:00:36.950 --> 00:00:41.365
values in order as they appear in the data frame without any sorting.

00:00:41.365 --> 00:00:43.359
A scatter plot is basically this plot,

00:00:43.359 --> 00:00:47.500
but without any connecting lines and distinct points at each value pair.

00:00:47.500 --> 00:00:50.825
We'll be fine to use error bar if all of our data is sorted by

00:00:50.825 --> 00:00:55.325
the X variable and we only have one Y value for each X value.

00:00:55.325 --> 00:00:58.795
So, let's do some work to get a data frame with those qualities.

00:00:58.795 --> 00:01:01.310
First of all, I'm going to set bin edges and

00:01:01.310 --> 00:01:04.775
centers for summarizing the data on the displacement value.

00:01:04.775 --> 00:01:10.125
I need these center-values so that the points are plotted in their accurate positions.

00:01:10.125 --> 00:01:12.540
I'm leaving out the last value of the bin edges,

00:01:12.540 --> 00:01:15.580
since that won't correspond to an actual bin center.

00:01:15.579 --> 00:01:18.439
Next, I'll use Panda's cut function to

00:01:18.439 --> 00:01:21.534
figure out which bin each data points should be used in.

00:01:21.534 --> 00:01:24.314
The first argument is the series I'm slicing,

00:01:24.314 --> 00:01:27.149
the second argument is the set of bins,

00:01:27.150 --> 00:01:30.315
and the third argument makes sure that the values that are

00:01:30.314 --> 00:01:33.959
equal to the mean get included into the bins.

00:01:33.959 --> 00:01:36.289
Now, I'm going to use groupby to group-by

00:01:36.290 --> 00:01:40.960
those displacement bins and then take the mean of points that fall in each bin.

00:01:40.959 --> 00:01:44.094
Finally, we're ready to plot again.

00:01:44.094 --> 00:01:46.914
Since we're no longer using the original data frame,

00:01:46.915 --> 00:01:48.850
we need to change our arguments.

00:01:48.849 --> 00:01:51.799
The bin centers are going to go with the X parameter and

00:01:51.799 --> 00:01:55.435
the Panda series with the fuel efficiency for the Y parameter.

00:01:55.435 --> 00:01:57.704
The line plot looks like this,

00:01:57.704 --> 00:02:01.754
showing a general decrease in fuel efficiency with engine size.

00:02:01.754 --> 00:02:05.444
There is a gap in the line where there is no data available.

00:02:05.444 --> 00:02:07.434
With the error bar function,

00:02:07.435 --> 00:02:10.485
we can also compute the standard deviation of the fuel efficiencies in

00:02:10.485 --> 00:02:14.500
each bin and then plot them through the yerr parameter.

00:02:14.500 --> 00:02:16.620
This plot shows that while the cars with

00:02:16.620 --> 00:02:20.009
smaller engine sizes have generally higher fuel efficiency,

00:02:20.009 --> 00:02:23.799
there's also a lot more variability in those efficiencies.

