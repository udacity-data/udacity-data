WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.835
Making commits to a repository can be nerve wracking.

00:00:03.835 --> 00:00:05.310
What if I make a mistake?

00:00:05.309 --> 00:00:07.410
What if I want to undo something I did in the past?

00:00:07.410 --> 00:00:09.224
Or what if I want to totally erase

00:00:09.224 --> 00:00:13.449
the last few commits because I'm positive they will never be used?

00:00:13.449 --> 00:00:15.599
That's exactly what we're going to look at.

00:00:15.599 --> 00:00:19.140
In this lesson we'll look at git commit --amend,

00:00:19.140 --> 00:00:22.050
git revert, and git reset.

00:00:22.050 --> 00:00:24.069
With git commit --amend,

00:00:24.068 --> 00:00:27.189
you can alter the most recent commit.

00:00:27.190 --> 00:00:29.670
You'd want to do this if you forgot to include a file

00:00:29.670 --> 00:00:32.685
in the commit or had a typo in the commit message.

00:00:32.685 --> 00:00:37.400
With git revert, you provide it the SHA of the commit that you want reverted.

00:00:37.399 --> 00:00:40.545
The changes that were made in that commit are reversed.

00:00:40.545 --> 00:00:43.445
So lines that were added in the commit will be deleted.

00:00:43.445 --> 00:00:45.524
Don't worry though. We'll look at this in detail.

00:00:45.524 --> 00:00:49.244
With git reset, you can actually delete commits.

00:00:49.244 --> 00:00:51.134
Now you can't delete just any commit.

00:00:51.134 --> 00:00:53.250
You have to delete commits in order.

00:00:53.250 --> 00:00:55.689
But this is a potentially dangerous command

00:00:55.689 --> 00:00:58.884
because you are removing items from the repository.

00:00:58.884 --> 00:01:01.215
With these new commands, you'll have the git powers

00:01:01.215 --> 00:01:04.070
to tackle anything your job can throw at you.

00:01:04.069 --> 00:01:07.000
Let's look at git commits --amend flag.

