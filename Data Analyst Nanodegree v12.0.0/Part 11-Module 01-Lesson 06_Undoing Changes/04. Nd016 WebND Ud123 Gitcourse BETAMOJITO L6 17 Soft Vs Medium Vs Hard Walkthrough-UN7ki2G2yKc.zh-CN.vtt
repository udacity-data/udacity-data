WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.544
这是我们仓库的三个部分：工作区、

00:00:04.544 --> 00:00:07.609
暂存区和顶部的版本库

00:00:07.610 --> 00:00:10.714
假设仓库中现在有这些提交

00:00:10.714 --> 00:00:13.650
master 当前指向最近的提交

00:00:13.650 --> 00:00:15.583
HEAD 当前指向 master

00:00:15.583 --> 00:00:18.199
而我们的文件则位于工作区中

00:00:18.199 --> 00:00:20.504
让我们转换一下布局

00:00:20.504 --> 00:00:25.634
运行 reset 后 提交内容可能会去三个地方 工作区、

00:00:25.635 --> 00:00:27.828
暂存区或回收站

00:00:27.827 --> 00:00:29.425
去回收站表示它将被删除

00:00:29.425 --> 00:00:35.230
运行 git reset HEAD~1 会将 HEAD 和 master 移动到前一个提交

00:00:35.229 --> 00:00:39.003
但是 这个带有 3 的提交会怎么样？

00:00:39.003 --> 00:00:43.618
提交所作的更改可能移动到工作区或暂存区

00:00:43.618 --> 00:00:45.329
也可能直接被移到回收站

00:00:45.329 --> 00:00:48.979
这完全取决于与 reset 命令一起使用的选项

00:00:48.979 --> 00:00:50.399
让我们将这个提交移回来

00:00:50.399 --> 00:00:53.265
如果我们不指定任何选项的来运行 git reset

00:00:53.265 --> 00:00:55.378
则在 SHA 为 3 的提交中所作的更改

00:00:55.378 --> 00:00:59.159
将存留于工作区的文件中

00:00:59.159 --> 00:01:02.169
这是因为 --mixed 是默认值

00:01:02.170 --> 00:01:06.704
所以 不指定任何选项的来运行 git reset 相当于带有 --mixed

00:01:06.704 --> 00:01:08.905
如果我们暂存文件并再次提交

00:01:08.905 --> 00:01:11.230
将会获得相同的提交内容

00:01:11.230 --> 00:01:13.259
但我们会得到一个不同的提交 SHA

00:01:13.260 --> 00:01:16.015
这只是因为提交的时间戳与原来的时间戳不同

00:01:16.015 --> 00:01:18.939
但提交内容将完全一样

00:01:18.939 --> 00:01:22.379
使用 --soft 选项

00:01:22.379 --> 00:01:26.609
会将 SHA 为 3 的提交中所作的更改移动到暂存区

00:01:26.609 --> 00:01:29.359
这些更改仍然相同 而且已经暂存好了

00:01:29.359 --> 00:01:32.504
你需要做的只是运行 git commit 来重新提交

00:01:32.504 --> 00:01:34.828
同样 由于时间戳不同

00:01:34.828 --> 00:01:37.209
新提交的 SHA 也会不同

00:01:37.209 --> 00:01:40.229
最后是 --hard 后缀

00:01:40.230 --> 00:01:44.040
它会删除 SHA 为 3 的提交中所作的所有更改

