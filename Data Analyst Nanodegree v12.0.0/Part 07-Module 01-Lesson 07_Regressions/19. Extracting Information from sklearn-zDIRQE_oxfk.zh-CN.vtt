WEBVTT
Kind: captions
Language: zh-CN

00:00:00.410 --> 00:00:03.160
在离开这个编码示例前 我希望向你展示

00:00:03.160 --> 00:00:07.270
一些能充分发挥回归作用的代码

00:00:07.270 --> 00:00:09.300
首先是你可能想要用来进行预测的代码

00:00:09.300 --> 00:00:12.070
当然 它不应该那么困难

00:00:12.070 --> 00:00:14.930
因此 你在回归上调用 predict 函数就行了

00:00:14.930 --> 00:00:18.730
但有一个小问题 它会需要一个列表(作为参数)

00:00:18.730 --> 00:00:23.150
所以 即使你只有一个要预测的值

00:00:23.150 --> 00:00:25.160
仍然需要将其放入列表中

00:00:25.160 --> 00:00:27.340
你可能还想知道回归的

00:00:27.340 --> 00:00:29.730
系数和截距是什么

00:00:29.730 --> 00:00:32.482
你可以使用 reg.coef_ 和

00:00:32.482 --> 00:00:35.510
Reg.intercept_ 来获取这些信息 正如你此处所见

00:00:35.510 --> 00:00:36.840
别忘了这里的短下划线

00:00:36.840 --> 00:00:38.970
否则 它会弄不懂你在说什么 

00:00:38.970 --> 00:00:43.420
请记住 我们预计的斜率十分接近 6.25

00:00:43.420 --> 00:00:44.860
但可能并不准确

00:00:44.860 --> 00:00:46.970
截距应该接近 0

00:00:46.970 --> 00:00:49.020
但同样 我们不期待它完全正确

00:00:49.020 --> 00:00:51.590
因为我们的训练数据中存在一些噪声

00:00:51.590 --> 00:00:54.780
这里还有几行关于 r 平方分数的代码

00:00:54.780 --> 00:00:56.510
我会立刻回头介绍这些代码

00:00:56.510 --> 00:00:59.120
但我现在希望向你介绍

00:00:59.120 --> 00:01:01.330
什么是预测、系数和截距

00:01:01.330 --> 00:01:03.900
这三行是我们刚刚介绍过的内容

00:01:03.900 --> 00:01:06.470
我可以根据回归预测净值

00:01:06.470 --> 00:01:09.250
根据我的年龄 它大约为 160

00:01:09.250 --> 00:01:11.760
我们也可以打印出斜率和截距

00:01:11.760 --> 00:01:14.090
记住 我们原以为斜率大约为 6.25

00:01:14.090 --> 00:01:15.970
很接近 但不完全一样

00:01:15.970 --> 00:01:18.760
截距也是一样 并不刚好为 0

00:01:18.760 --> 00:01:21.680
在下面几个视频中 我们将详细介绍

00:01:21.680 --> 00:01:23.560
回归上可能会出现的误差类型

00:01:23.560 --> 00:01:25.470
因为它们与分类中可能出现的误差类型

00:01:25.470 --> 00:01:26.830
有根本上的不同

00:01:26.830 --> 00:01:28.730
最后 

00:01:28.730 --> 00:01:31.560
我们将计算所谓的 r 平方

00:01:31.560 --> 00:01:34.630
现在 下面几行提供了一些有关

00:01:34.630 --> 00:01:35.760
回归性能的输出

00:01:35.760 --> 00:01:39.080
所以 我们将在后续视频中详细介绍的一种回归评估方法是

00:01:39.080 --> 00:01:42.660
一个称为 R 平方的指标

00:01:42.660 --> 00:01:45.690
此外还有误差和 我们会讨论所有这些内容

00:01:45.690 --> 00:01:47.200
但现在 让我先向你展示它的外观

00:01:47.200 --> 00:01:50.690
以便你有理由理解其重要性

00:01:50.690 --> 00:01:53.500
你将使用在回归上执行的

00:01:53.500 --> 00:01:56.500
分数函数来访问这些性能指标

00:01:56.500 --> 00:01:59.560
你始终希望查看测试数据上的分数

00:01:59.560 --> 00:02:02.820
因为你显然会使用训练数据来拟合回归

00:02:02.820 --> 00:02:05.680
所以 如果存在任何过拟合 继续执行此操作就会

00:02:05.680 --> 00:02:08.740
在查看测试数据时显示较低的分数

