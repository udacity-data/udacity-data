WEBVTT
Kind: captions
Language: zh-CN

00:00:00.310 --> 00:00:02.170
我刚刚告诉你了 这是一道很难的测试题

00:00:02.170 --> 00:00:04.550
如果你做对了 做得不错

00:00:04.550 --> 00:00:07.250
让我们来一个一个看一看这些答案

00:00:07.250 --> 00:00:10.220
第一个可能是尽量减少第一个和最后一个数据点的误差

00:00:10.220 --> 00:00:13.970
要记住这件事也不是什么坏事

00:00:13.970 --> 00:00:17.580
你必定想很好地拟合第一个和最后一个数据点

00:00:17.580 --> 00:00:20.000
但拟合的结果很容易像这样

00:00:20.000 --> 00:00:23.300
作为一个整体的数据趋势 看起来可能像这样

00:00:23.300 --> 00:00:25.150
但如果你只在第一个和最后一个数据点的基础上

00:00:25.150 --> 00:00:28.250
进行拟合 你会忽略它们之间的所有数据

00:00:28.250 --> 00:00:32.000
并得出一个无法拟合整体趋势的图形

00:00:32.000 --> 00:00:32.900
下一个选择是

00:00:32.900 --> 00:00:37.910
所有数据点上的误差的和可能听起来不错

00:00:37.910 --> 00:00:40.250
但有一种情况下这种方式会出错

00:00:40.250 --> 00:00:43.200
假如你有这样不错的线性数据

00:00:43.200 --> 00:00:45.010
但你以这样的回归来进行拟合

00:00:46.510 --> 00:00:48.250
很明显拟合得不太好

00:00:48.250 --> 00:00:51.990
然而 比如这个误差为-100

00:00:51.990 --> 00:00:55.360
这个误差为+100

00:00:55.360 --> 00:00:59.060
那么这两个误差将相互抵消

00:00:59.060 --> 00:01:01.170
这一点也同样如此

00:01:01.170 --> 00:01:03.640
这一点、这一点和这一点

00:01:05.200 --> 00:01:08.990
这种情况下 误差的和为零

00:01:08.990 --> 00:01:12.340
即使拟合很差

00:01:12.340 --> 00:01:14.680
那就是为什么我们不使用误差和的原因

00:01:16.500 --> 00:01:18.260
两个效果要稍好些的数

00:01:18.260 --> 00:01:21.610
一个是误差的绝对值和

00:01:21.610 --> 00:01:24.299
因此在这种情况下

00:01:25.660 --> 00:01:27.920
将所有误差变为正误差

00:01:27.920 --> 00:01:32.760
这里的三个点和这些数已经是正值了

00:01:32.760 --> 00:01:33.520
加在一起

00:01:33.520 --> 00:01:38.140
误差的绝对值的和相当大

00:01:38.140 --> 00:01:39.370
可能就行得通了

00:01:39.370 --> 00:01:43.810
最后可行的是 我们也要更详细解释的是

00:01:43.810 --> 00:01:47.730
这也是线性回归的计算方法

00:01:47.730 --> 00:01:52.100
即最小化所有数据点上的误差平方和

00:01:52.100 --> 00:01:54.990
这样处理有一个好处是 即使你得到负误差

00:01:54.990 --> 00:01:58.390
你可以取误差的绝对值

00:01:58.390 --> 00:02:01.130
当然负误差平方后就成为正数

00:02:01.130 --> 00:02:04.610
如果开始就是正数 平方后仍为正数

00:02:04.610 --> 00:02:05.560
因此 这个也可行

