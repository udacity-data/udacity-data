WEBVTT
Kind: captions
Language: zh-CN

00:00:00.590 --> 00:00:03.880
你已经思考了这个问题 现在让我来告诉你这一点为什么很重要

00:00:03.880 --> 00:00:06.340
让我先以中间线为例

00:00:06.340 --> 00:00:08.650
我的误差大概会是这样的

00:00:08.650 --> 00:00:09.710
我现在把它们画上来

00:00:09.710 --> 00:00:13.070
这是每个点与该点在回归线上的

00:00:13.070 --> 00:00:15.790
预测值的距离

00:00:15.790 --> 00:00:19.370
如果你要计算误差绝对值之和

00:00:19.370 --> 00:00:22.930
只需计算所有这些橙色距离的总和就能得出答案

00:00:22.930 --> 00:00:24.740
不过 现在让我们来看看最上面这条线

00:00:24.740 --> 00:00:26.870
我们可以在这里执行相同的操作

00:00:26.870 --> 00:00:28.920
现在我们开始画上距离

00:00:28.920 --> 00:00:30.970
虽然离上面所有点更近了

00:00:30.970 --> 00:00:33.820
但离下面所有点更远了

00:00:33.820 --> 00:00:37.130
以这两个点为例

00:00:37.130 --> 00:00:38.610
它离上面这个点近了一些

00:00:38.610 --> 00:00:40.660
离下面这个点远了一些

00:00:40.660 --> 00:00:42.150
但总的说来 这两个示例点

00:00:42.150 --> 00:00:45.640
的总误差将与这两个点

00:00:45.640 --> 00:00:48.520
相对于中间线的总误差完全相同

00:00:48.520 --> 00:00:50.030
实际上 这对于最下面这条回归线

00:00:50.030 --> 00:00:52.030
上述结论也成立

00:00:52.030 --> 00:00:54.200
如果每条线上方和下方的

00:00:54.200 --> 00:00:57.510
点数都相同 那么一般来说该结论始终都成立

00:00:57.510 --> 00:01:01.910
使用误差绝对值时 

00:01:01.910 --> 00:01:06.290
回归所在的准确范围方面存在固有的模糊性

00:01:06.290 --> 00:01:07.470
它可以在这一范围内的任何位置

00:01:08.850 --> 00:01:13.830
换句话说 可以有多条能最大程度降低绝对误差的线

00:01:13.830 --> 00:01:18.310
但只有一条可以最大程度降低误差平方的线

00:01:18.310 --> 00:01:22.890
也就是说 如果我们使用的指标不是距离的绝对值

00:01:22.890 --> 00:01:26.300
而是距离平方的绝对值 这种模糊性将不存在

00:01:27.300 --> 00:01:29.590
我还要补充一点

00:01:29.590 --> 00:01:32.150
这实际上更具实际意义

00:01:32.150 --> 00:01:35.340
使用误差平方和查找回归的方法

00:01:35.340 --> 00:01:38.630
也能使回归(算法)的实现简单很多

00:01:38.630 --> 00:01:40.420
也能使回归(算法)的实现简单很多

00:01:40.420 --> 00:01:43.100
最小化误差平方和

00:01:43.100 --> 00:01:46.680
而不是绝对误差和时 更容易找到回归线

00:01:46.680 --> 00:01:50.180
这让我们在使用 sklearn 执行大多数

00:01:50.180 --> 00:01:54.370
需要大量计算的工作时无需过多担心

00:01:54.370 --> 00:01:57.450
当然 如果你实际上编写的代码

00:01:57.450 --> 00:02:00.400
通过线性代数来查找回归

00:02:00.400 --> 00:02:05.530
或者可能通过微积分来查找回归的结果

00:02:05.530 --> 00:02:07.450
那么这会是一个大问题

00:02:07.450 --> 00:02:10.258
这也是传统上回归使用

00:02:10.258 --> 00:02:11.342
最小化平方误差和的另一个原因

00:02:11.884 --> 00:02:14.263
即它(最小化平方误差)在计算上要简单得多

