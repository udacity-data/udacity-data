WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.634
让我们运行 git log -p 命令来查看提交

00:00:04.634 --> 00:00:10.879
它会同时包括实际的代码更改或对文件所作的补丁

00:00:10.880 --> 00:00:14.172
这边第一个部分与常规的 git log 命令相同

00:00:14.172 --> 00:00:16.425
与 --stat 标志一样

00:00:16.425 --> 00:00:23.700
-p 或 --patch 标志也会在标准的提交信息下面添加额外的信息

00:00:23.699 --> 00:00:27.155
这是补丁输出的开始

00:00:27.155 --> 00:00:29.515
我承认这个输出有点难懂

00:00:29.515 --> 00:00:31.560
所以暂且听我讲一下

00:00:31.559 --> 00:00:34.060
因为我们平时并不怎么看上面这几行

00:00:34.060 --> 00:00:36.216
但了解一下总是好的

00:00:36.216 --> 00:00:39.759
差异和补丁指的是同一回事

00:00:39.759 --> 00:00:41.849
补丁显示的是文件的

00:00:41.850 --> 00:00:45.810
原始版本和更改版本之间的差异

00:00:45.810 --> 00:00:48.315
我们看到的是 CSS 文件

00:00:48.314 --> 00:00:49.979
这是文件的第一个版本

00:00:49.979 --> 00:00:54.274
它出现在一个名为 a 的目录中 因为它是第一个

00:00:54.274 --> 00:00:57.144
但你并不会在库中实际看到这个目录

00:00:57.145 --> 00:00:58.835
然后是第二个版本

00:00:58.835 --> 00:01:02.685
它出现在 b 目录中 因为它是第二个

00:01:02.685 --> 00:01:05.159
这两个名称相同 因为我们看到的是

00:01:05.159 --> 00:01:08.119
同一个文件的两个不同版本

00:01:08.120 --> 00:01:10.760
如果文件被重命名 这些名称就会不同

00:01:10.760 --> 00:01:13.590
是的 git 可以跟踪被重命名的文件

00:01:13.590 --> 00:01:16.540
很酷 对吧？现在让我们回到输出

00:01:16.540 --> 00:01:19.230
这一行显示了文件更改前

00:01:19.230 --> 00:01:23.300
第一个版本的哈希值和更改后的哈希值

00:01:23.299 --> 00:01:26.394
这些哈希值与提交 SHA 不同

00:01:26.394 --> 00:01:28.729
我基本上不怎么看这一行

00:01:28.730 --> 00:01:31.515
这两个和这些是一样的

00:01:31.515 --> 00:01:34.170
它们是文件的新旧版本

00:01:34.170 --> 00:01:38.010
我们稍后再来看这一行

00:01:38.010 --> 00:01:41.460
这是 CSS 文件的实际代码

00:01:41.459 --> 00:01:44.489
这些前面带有加号的绿色行

00:01:44.489 --> 00:01:49.704
表示这些行是此次提交中添加的

00:01:49.704 --> 00:01:51.894
现在让我们再回到这一行

00:01:51.894 --> 00:01:55.524
它可以告诉我们文件哪里作出了编辑

00:01:55.525 --> 00:01:58.650
这说明在文件的较旧或原始版本中

00:01:58.650 --> 00:02:03.815
这段代码来自第 38 行 并显示了六行代码

00:02:03.814 --> 00:02:05.974
这六行代码在这里

00:02:05.974 --> 00:02:10.109
一、二、三、四、五、六

00:02:10.110 --> 00:02:13.305
在文件的较新或当前版本中

00:02:13.305 --> 00:02:15.370
它也从第 38 行开始

00:02:15.370 --> 00:02:20.730
但现在有 11 行代码 原来的六行加上新的五行

00:02:20.729 --> 00:02:23.664
我们可以在这里看到所有 11 行代码

00:02:23.664 --> 00:02:26.185
现在 这个提交只有添加

00:02:26.185 --> 00:02:29.555
如果有删除行 会是什么样的？好的 让我们来看看

00:02:29.555 --> 00:02:33.250
我们需要向下滚动到下一个提交 就是这个

00:02:33.250 --> 00:02:38.016
这边第一个补丁输出还是 CSS 文件的

00:02:38.016 --> 00:02:42.030
这里是 HTML 文件的补丁输出

00:02:42.030 --> 00:02:47.449
提交所删除的行是红色的 以减号开头

00:02:47.449 --> 00:02:50.139
这里要注意非常重要的一点是

00:02:50.139 --> 00:02:55.279
git 按行跟踪编辑 所以如果对一行进行编辑

00:02:55.280 --> 00:02:58.890
它会显示该行被移除 然后再被添加

00:02:58.889 --> 00:03:01.328
例如 这里说 main 被删除

00:03:01.329 --> 00:03:04.375
但这里说 main 又被添加

00:03:04.375 --> 00:03:06.860
类为 container 的 div 被添加

00:03:06.860 --> 00:03:09.680
main 元素及其所有代码都被缩进

00:03:09.680 --> 00:03:12.079
使其正确嵌套在 HTML 文件中

00:03:12.079 --> 00:03:15.155
缩进此行使其发生了更改

00:03:15.155 --> 00:03:19.400
所以 对于 git 来说 被缩进一格的这一行是删除的

00:03:19.400 --> 00:03:23.069
而被缩进两格的这一行是添加的

00:03:23.069 --> 00:03:25.844
我知道补丁输出中有很多信息

00:03:25.844 --> 00:03:29.625
但其中一些是多余的 还有一些可以忽略

00:03:29.625 --> 00:03:33.930
补丁输出中的重要内容是 我们正在查看的文件和修改

00:03:33.930 --> 00:03:39.139
另外 我们有时也需要知道文件中哪些地方进行了更改

