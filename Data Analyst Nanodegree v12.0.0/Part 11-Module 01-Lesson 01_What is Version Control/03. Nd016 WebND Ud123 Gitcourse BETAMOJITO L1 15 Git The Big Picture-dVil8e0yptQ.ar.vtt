WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:04.695
لنقُل إن لدينا مستودع يتألف من هذه الملفات
الثلاثة.

00:00:04.695 --> 00:00:07.724
نحن نرغب في البدء باستخدام خاصية التحكم بالنسخة في
هذا المشروع،

00:00:07.724 --> 00:00:09.754
لذا ننشئ مستودع Git جديدًا.

00:00:09.755 --> 00:00:11.069
في مستودع Git

00:00:11.069 --> 00:00:13.920
توجد ثلاث مناطق رئيسية نحتاج أن نتعرف عليها.

00:00:13.919 --> 00:00:15.833
أولًا هناك دليل العمل،

00:00:15.833 --> 00:00:17.556
ثم فهرس الترحيل،

00:00:17.556 --> 00:00:19.649
وأخيرًا المستودع.

00:00:19.649 --> 00:00:22.129
إذن لدينا هذه المناطق الثلاثة المميزة في Git.

00:00:22.129 --> 00:00:23.750
عندما تعمل للمرة الأولى على برنامج Git

00:00:23.750 --> 00:00:26.984
فقد تجد قليلًا من الصعوبة في إدراك وجود هذه المناطق
الثلاثة المميزة،

00:00:26.984 --> 00:00:31.524
لأنك لا ترى فعليًا أي تغيير ظاهر في الملفات على جهاز
الكمبيوتر.

00:00:31.524 --> 00:00:33.795
رغم ذلك، يدير Git هذه المناطق الثلاثة المختلفة،

00:00:33.795 --> 00:00:36.450
وسنستخدم أمر Git shell

00:00:36.450 --> 00:00:39.650
للتفاعل مع الملفات ونقلها من قسم إلى آخر.

00:00:39.649 --> 00:00:42.820
إذن لقد أنشأنا مستودع Git الفارغ هذا،

00:00:42.820 --> 00:00:46.725
وبإمكاننا القول بأنه مستودع فارغ لأن قسم المستودع
فارغ.

00:00:46.725 --> 00:00:49.785
يتعرف Git على الملفات التي لم يرَها من قبل.

00:00:49.784 --> 00:00:52.709
دعونا نشِر إلى أن الملف يكون جديدًا ومميزًا بنجمة
خضراء.

00:00:52.710 --> 00:00:56.465
يتتبع Git الملفات عن طريق إضافتها إلى المستودع؛

00:00:56.465 --> 00:00:59.535
لكن لا يمكننا نقل هذه الملفات إلى المستودع مباشرة،

00:00:59.534 --> 00:01:02.375
بل يجب نقلها أولًا إلى فهرس الترحيل.

00:01:02.375 --> 00:01:05.680
إذن سنستخدم Git لنقل التغييرات إلى فهرس الترحيل.

00:01:05.680 --> 00:01:07.845
تذكَّروا أن فهرس التحويل هو المكان الذي يمكنكم أن
تضعوا به

00:01:07.844 --> 00:01:10.685
جميع الملفات التي تريدون تثبيتها.

00:01:10.685 --> 00:01:13.930
الآن دعونا نثبِّتها، وهذا ينقلها إلى المستودع.

00:01:13.930 --> 00:01:17.485
الآن الملفات آمنة في حالتها الحالية.

00:01:17.484 --> 00:01:20.745
لنقُل إننا سنُجري بعد ذلك تغييرات في ملف CSS الخاص
بمواقعنا.

00:01:20.745 --> 00:01:24.510
يرى Git هذا التغيير ويضع علامة على الملف بينما يتم
تعديله.

00:01:24.510 --> 00:01:26.609
إننا نتبع نفس الخطوات لنقل التغييرات

00:01:26.609 --> 00:01:30.150
في ملف CSS إلى فهرس الترحيل، ومن ثم تثبيتها.

00:01:30.150 --> 00:01:31.215
أعتقد أن الفكرة قد وصلتكم،

00:01:31.215 --> 00:01:33.284
لكن دعونا نركِّز عليها لمرة إضافية.

00:01:33.284 --> 00:01:36.659
لنقُل إن ملفات HTML وJavaScript قد تغيرت.

00:01:36.659 --> 00:01:39.729
تذكَّروا أن Git يعلم أيّ الملفات جديد أو تم
تغييره.

00:01:39.730 --> 00:01:43.109
سننقل هذه التغييرات إلى فهرس الترحيل، ومن ثم
نثبِّتها.

00:01:43.109 --> 00:01:47.028
إذن العملية كالتالي: أضيفوا ملفًا جديدًا أو عدِّلوا
ملفًا موجودًا،

00:01:47.028 --> 00:01:49.155
ثم انقلوا التغييرات إلى فهرس الترحيل،

00:01:49.155 --> 00:01:52.162
ثم ثبِّتوا التغييرات في المستودع. هل وصلتكم
الفكرة؟

00:01:52.162 --> 00:01:54.548
إذن ماذا عن هذا السيناريو:

00:01:54.549 --> 00:01:59.665
لنقُل إن ملفات HTML وJavaScript قد تغيرت وأننا قد
رحّلنا التغييرات.

00:01:59.665 --> 00:02:03.015
إذا قررنا بعدها أن نعدِّل ملف HTML مجددًا

00:02:03.015 --> 00:02:05.355
فماذا سيحدث لو ثبَّتناه فورًا؟

00:02:05.355 --> 00:02:07.320
يبدو الوقت مناسبًا الآن لاختبار صغير.

