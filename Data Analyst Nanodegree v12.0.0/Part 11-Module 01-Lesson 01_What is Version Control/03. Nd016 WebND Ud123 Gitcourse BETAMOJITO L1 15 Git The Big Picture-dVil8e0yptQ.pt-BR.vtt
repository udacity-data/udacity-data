WEBVTT
Kind: captions
Language: pt-BR

00:00:00.300 --> 00:00:04.733
Imagine um repositório
feito com estes três arquivos.

00:00:04.767 --> 00:00:07.767
Nós queremos utilizar
o controle de versão neste projeto

00:00:07.800 --> 00:00:09.867
para criarmos
um novo repositório Git.

00:00:09.900 --> 00:00:13.733
Nele há três áreas principais
que precisamos conhecer.

00:00:13.767 --> 00:00:15.767
Temos o diretório
de trabalho,

00:00:15.800 --> 00:00:19.500
o índice de estágio
e, por fim, o repositório.

00:00:19.533 --> 00:00:22.267
Nós temos três áreas
diferentes no Git.

00:00:22.300 --> 00:00:23.733
Ao começar
a lidar com o Git,

00:00:23.767 --> 00:00:26.900
será um pouco difícil perceber
essas três áreas,

00:00:26.933 --> 00:00:29.600
porque você não nota
nenhuma alteração visível

00:00:29.633 --> 00:00:31.533
nos arquivos
do seu computador.

00:00:31.567 --> 00:00:33.800
O Git gerencia
essas três áreas.

00:00:33.833 --> 00:00:37.067
Nós usaremos o comando shell
para interagir com arquivos

00:00:37.100 --> 00:00:39.367
e para mudá-los
de uma seção para outra.

00:00:39.400 --> 00:00:42.700
Nós criamos este
repositório vazio

00:00:42.733 --> 00:00:44.400
e sabemos
que ele está vazio,

00:00:44.433 --> 00:00:46.933
porque a seção repositória
está vazia.

00:00:46.967 --> 00:00:49.467
Git reconhece
os arquivos novos.

00:00:49.500 --> 00:00:53.033
Vamos indicar os arquivos novos
com uma estrela verde.

00:00:53.067 --> 00:00:56.367
Git rastreia arquivos
os adicionando ao repositório.

00:00:56.400 --> 00:00:59.467
Nós podemos adicioná-los
ao repositório.

00:00:59.500 --> 00:01:02.433
Eles precisam ser movidos
para o índice de estágio,

00:01:02.467 --> 00:01:05.533
assim o Git se acostumará
com as alterações.

00:01:05.567 --> 00:01:08.567
O índice de estágio é onde
você pode colocar os arquivos

00:01:08.600 --> 00:01:10.567
que estão prestes a ser
um commit.

00:01:10.600 --> 00:01:13.767
Criamos um commit
movendo-os para o repositório.

00:01:13.800 --> 00:01:17.433
Agora os arquivos
estão em segurança.

00:01:17.467 --> 00:01:20.800
Vamos imaginar algumas mudanças
no arquivo CSS.

00:01:20.833 --> 00:01:24.200
Git vê a mudança e marca
o arquivo como modificado.

00:01:24.233 --> 00:01:28.667
Nós fazemos os mesmos passos
no CSS para o índice de estágio

00:01:28.700 --> 00:01:30.267
para depois criar um commit.

00:01:30.300 --> 00:01:33.167
Acho que você entendeu,
mas vamos ver mais uma vez.

00:01:33.200 --> 00:01:36.433
Digamos que os arquivos HTML
e JavaScript foram alterados.

00:01:36.467 --> 00:01:39.733
O Git sabe quais arquivos
são novos ou alterados.

00:01:39.767 --> 00:01:42.033
Movemos as alterações
para o índice de estágio

00:01:42.067 --> 00:01:43.300
e criamos um commit.

00:01:43.333 --> 00:01:46.967
O processo é adicionar
ou alterar um arquivo,

00:01:47.000 --> 00:01:49.100
mover para
o índice de estágio

00:01:49.133 --> 00:01:52.267
e criar commits das alterações
no repositório. Entendeu?

00:01:52.300 --> 00:01:54.467
O que você me diz
sobre este cenário?

00:01:54.500 --> 00:01:57.633
Digamos que os arquivos HTML
e CSS foram alterados

00:01:57.667 --> 00:02:00.033
e nós fizemos o estágio
das alterações.

00:02:00.067 --> 00:02:02.967
Se decidirmos modificar
o arquivo HTML novamente,

00:02:03.000 --> 00:02:05.700
o que aconteceria
com o commit agora?

00:02:05.733 --> 00:02:07.367
Chegou a hora
de um questionário.

