WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.695
假设我们有一个由这三个文件组成的仓库

00:00:04.695 --> 00:00:07.724
我们想在这个项目中开始使用版本控制

00:00:07.724 --> 00:00:09.754
因此要创建一个新的 git 仓库

00:00:09.755 --> 00:00:11.069
在 git 仓库中

00:00:11.069 --> 00:00:13.920
有三个我们需要知道的主要区域

00:00:13.919 --> 00:00:15.833
首先是工作区

00:00:15.833 --> 00:00:17.556
其次是暂存区

00:00:17.556 --> 00:00:19.649
最后是仓库区

00:00:19.649 --> 00:00:22.129
所以在 git 中有这三个不同的区域

00:00:22.129 --> 00:00:23.750
当你第一次使用 git 时

00:00:23.750 --> 00:00:26.984
可能不太容易意识到有这三个不同的区域

00:00:26.984 --> 00:00:31.524
因为你并不会在计算机上的文件中看到任何可见的更改

00:00:31.524 --> 00:00:33.795
但 git 的确管理着这三个不同的区域

00:00:33.795 --> 00:00:36.450
我们将使用 git shell 命令与文件进行交互

00:00:36.450 --> 00:00:39.650
并将其移动到不同的区域

00:00:39.649 --> 00:00:42.820
现在 我们已经创建了这个空的 git 仓库

00:00:42.820 --> 00:00:46.725
我们知道它是一个空仓库 因为仓库区是空的

00:00:46.725 --> 00:00:49.785
git 能够分辨从未见过的文件

00:00:49.784 --> 00:00:52.709
让我们用绿色星标来表示一个新文件

00:00:52.710 --> 00:00:56.465
git 通过将文件添加到仓库来跟踪文件

00:00:56.465 --> 00:00:59.535
但我们不能将这些文件直接移动到仓库区中

00:00:59.534 --> 00:01:02.375
它们必须首先被移动到暂存区

00:01:02.375 --> 00:01:05.680
因此 我们使用 git 将更改移动到暂存区

00:01:05.680 --> 00:01:07.845
请记住 暂存区可以用于存放

00:01:07.844 --> 00:01:10.685
所有即将提交的文件

00:01:10.685 --> 00:01:13.930
现在让我们提交文件 这会将其移动到仓库区中

00:01:13.930 --> 00:01:17.485
这些文件在目前状态下是安全的

00:01:17.484 --> 00:01:20.745
假设我们对网站的 CSS 文件进行了一些更改

00:01:20.745 --> 00:01:24.510
git 看到这个更改后 会将该文件标记为已修改

00:01:24.510 --> 00:01:26.609
我们采取相同的步骤 将 CSS 文件中的更改

00:01:26.609 --> 00:01:30.150
移动到暂存区中 然后将其提交

00:01:30.150 --> 00:01:31.215
我想你已经明白了

00:01:31.215 --> 00:01:33.284
不过让我们再来看一次

00:01:33.284 --> 00:01:36.659
假设 HTML 和 JavaScript 文件发生了更改

00:01:36.659 --> 00:01:39.729
请记住 git 知道哪些文件是新的或已更改

00:01:39.730 --> 00:01:43.109
我们将这些更改移动到暂存区中 然后将其提交

00:01:43.109 --> 00:01:47.028
所以步骤就是 添加一个新文件或修改一个现有文件

00:01:47.028 --> 00:01:49.155
将更改移动到暂存区中

00:01:49.155 --> 00:01:52.162
然后再将更改提交到仓库区 明白了？

00:01:52.162 --> 00:01:54.548
那么 如果出现以下情况呢？

00:01:54.549 --> 00:01:59.665
假设 HTML 和 CSS 文件发生了更改 我们也暂存了更改

00:01:59.665 --> 00:02:03.015
如果我们决定再次修改 HTML 文件

00:02:03.015 --> 00:02:05.355
然后立即提交 会发生什么？

00:02:05.355 --> 00:02:07.320
这看起来很适合作为练习考考你们

