WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.629
If we want to include data that doesn't exist in both tables,

00:00:03.629 --> 00:00:07.410
but only in one of the two tables we are using in our joint statement,

00:00:07.410 --> 00:00:11.865
there are three types of joins we might use: a Left Join,

00:00:11.865 --> 00:00:15.804
a Right Join, and a Full Outer Join.

00:00:15.804 --> 00:00:19.230
Each of these joins will provide all the resulting rows of an inner join,

00:00:19.230 --> 00:00:22.274
but we may also gain some additional rows.

00:00:22.274 --> 00:00:27.209
So, the result of an outer join will always have at least as many rows as an inner join,

00:00:27.210 --> 00:00:30.535
with the same logic in the, on, clause.

00:00:30.535 --> 00:00:36.280
This video is going to focus primarily on left and right joins.

00:00:36.280 --> 00:00:39.070
When we read our SELECT statements,

00:00:39.070 --> 00:00:43.500
the table listed in the FROM statement is considered the left table,

00:00:43.500 --> 00:00:47.234
while the table in the join is considered the right table.

00:00:47.234 --> 00:00:49.924
Let's change our inner join into a left join,

00:00:49.924 --> 00:00:52.529
by simply writing the word, left.

00:00:52.530 --> 00:00:54.189
The results that we get back,

00:00:54.189 --> 00:00:57.099
will include all of the results that match with the right table,

00:00:57.100 --> 00:00:58.695
just like in an inner join.

00:00:58.695 --> 00:01:04.079
It will also return any results that are in the left table that did not match.

00:01:04.079 --> 00:01:08.299
Using these subsets of the accounts and orders tables,

00:01:08.299 --> 00:01:10.984
every single row in the orders table here,

00:01:10.984 --> 00:01:13.429
can be matched to a row in the accounts table,

00:01:13.430 --> 00:01:15.650
with an ID in the accounts table,

00:01:15.650 --> 00:01:19.335
that corresponds to an account ID in the orders table.

00:01:19.334 --> 00:01:23.729
This result set is exactly the same as if we had used an inner join.

00:01:23.730 --> 00:01:28.594
A right join would produce a different set of results, though.

00:01:28.594 --> 00:01:31.674
There are four accounts without any orders,

00:01:31.674 --> 00:01:36.344
which means four rows of data that do not satisfy the condition of this join.

00:01:36.344 --> 00:01:38.890
Since it's a right join and not an inner join,

00:01:38.890 --> 00:01:42.034
these rows will be included at the bottom of the result set.

00:01:42.034 --> 00:01:44.439
They don't match with rows in the left table,

00:01:44.439 --> 00:01:49.179
so any columns from the left table will contain no data for these rows.

00:01:49.180 --> 00:01:52.315
We'll discuss more about what this means soon enough.

00:01:52.314 --> 00:01:55.129
You can see that after we join,

00:01:55.129 --> 00:01:59.500
this final table has all the same rows as the original inner join table.

00:01:59.500 --> 00:02:01.280
But it has these extra rows from

00:02:01.280 --> 00:02:05.375
the accounts table at the bottom that were not matched with any orders.

00:02:05.375 --> 00:02:08.865
Left and right joins are somewhat interchangeable.

00:02:08.865 --> 00:02:12.600
If we change this query so that the accounts table is in the FROM clause,

00:02:12.599 --> 00:02:15.132
and the orders table is in the join clause,

00:02:15.133 --> 00:02:18.300
the extra rows will be in the left table.

00:02:18.300 --> 00:02:20.465
We can now run a left join,

00:02:20.465 --> 00:02:22.580
and the results will be exactly the same as

00:02:22.580 --> 00:02:25.280
the right join we did with the previous query.

00:02:25.280 --> 00:02:28.949
Because left and right joins are effectively interchangeable,

00:02:28.949 --> 00:02:32.094
we use left joins through the rest of this course.

00:02:32.094 --> 00:02:34.639
The world is by and large standardized around this behavior,

00:02:34.639 --> 00:02:37.779
so you'll rarely see a right join in the wild.

00:02:37.780 --> 00:02:39.935
This makes it easier to read other people's queries,

00:02:39.935 --> 00:02:43.069
and quickly understand what they intended to accomplish.

00:02:43.069 --> 00:02:48.049
Consistency is especially important if you're writing a query with multiple joins.

00:02:48.050 --> 00:02:50.260
We're not quite there yet, but we will be soon.

