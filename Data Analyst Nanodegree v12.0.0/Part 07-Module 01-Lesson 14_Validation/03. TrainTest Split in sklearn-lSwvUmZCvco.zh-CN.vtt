WEBVTT
Kind: captions
Language: zh-CN

00:00:00.500 --> 00:00:03.460
迄今为止 在这门课上 我们已经讲了很多

00:00:03.460 --> 00:00:05.660
关于将数据分拆为训练集和测试集

00:00:05.660 --> 00:00:08.370
现在我要做的是向你们展示 要如何

00:00:08.370 --> 00:00:10.850
使用 sklearn 中的一些工具非常简单地做到

00:00:10.850 --> 00:00:13.610
当然 你不需要 sklearn 来做这件事

00:00:13.610 --> 00:00:16.690
只需要能够将数据分拆开来 但是 sklearn 有些功能

00:00:16.690 --> 00:00:20.920
能实际上把它变成一两行代码这样的问题

00:00:20.920 --> 00:00:24.190
如果你希望在 sklearn 中分拆训练测试 我们要找一组函数

00:00:24.190 --> 00:00:28.730
位于交叉验证的总分类下面

00:00:28.730 --> 00:00:31.550
在这个文档页内 有一些预热内容

00:00:31.550 --> 00:00:34.730
包括交叉验证的概念 你要用它的原因

00:00:34.730 --> 00:00:36.810
但是有些内容你已经熟悉

00:00:36.810 --> 00:00:39.070
因为我们在本课中已经讲过很多

00:00:39.070 --> 00:00:42.150
我要做的是向前跳到这里的代码示例

00:00:42.150 --> 00:00:44.440
向你展示这在代码中是如何部署的

00:00:44.440 --> 00:00:47.290
它的输出将是四个数据集

00:00:47.290 --> 00:00:50.630
前两个是

00:00:50.630 --> 00:00:51.800
训练和测试数据的特征

00:00:51.800 --> 00:00:55.320
后两个是训练和测试数据的标签

00:00:55.320 --> 00:00:59.600
所以在这个示例中 这里有几行用于探测多少个事件分别归入

00:00:59.600 --> 00:01:02.880
这两个数据集中 即训练和测试集

00:01:02.880 --> 00:01:05.860
往下这里 你可以看到实际上有一个 SVM 算法

00:01:05.860 --> 00:01:07.805
正在训练数据中进行训练

00:01:07.805 --> 00:01:12.510
标签中的特征 或者称之为 X_train 和 Y_train

00:01:12.510 --> 00:01:15.450
然后 我们可在测试集上进行评测

00:01:15.450 --> 00:01:17.830
所以 这是看所谓分类器的得分的东西

00:01:17.830 --> 00:01:20.190
这与准确度有点关联

00:01:20.190 --> 00:01:23.860
所以 这是你要对测试数据进行评估的内容

00:01:23.860 --> 00:01:27.310
对于一些微型项目 你可能注意到了一件事

00:01:27.310 --> 00:01:29.460
如果你足够仔细的话

00:01:29.460 --> 00:01:32.340
会发现我们实际上一直在部署此代码

00:01:32.340 --> 00:01:36.660
例如 在你做过的所有的分类器训练练习中

00:01:36.660 --> 00:01:39.970
都有一行代码非常类似这个代码

00:01:39.970 --> 00:01:43.760
我用这代码来将数据分拆成训练和测试集

00:01:43.760 --> 00:01:48.270
现在我要让你来做此事 以编程测验的形式做

00:01:48.270 --> 00:01:52.150
我会要求你自己实际部署一行像这样的代码

00:01:52.150 --> 00:01:53.980
这样就能有些实际的练习

00:01:53.980 --> 00:01:56.850
我将给你一个数据集 数据的读入带有全部特征

00:01:56.850 --> 00:01:58.190
以及全部标签

00:01:58.190 --> 00:02:00.940
我想让你做的是 在此插入一行代码

00:02:00.940 --> 00:02:03.170
将其分拆为训练和测试集

00:02:03.170 --> 00:02:04.280
然后我将用那些训练集和测试集

00:02:04.280 --> 00:02:09.210
然后使用一个分类器进行训练和预测

00:02:09.210 --> 00:02:12.540
所以 你的工作就是练习部署一行这样的代码

00:02:12.540 --> 00:02:15.290
在 sklearn 中分拆训练集和测试集

00:02:15.290 --> 00:02:17.450
这样代码将正确执行

00:02:17.450 --> 00:02:18.120
试一下吧

