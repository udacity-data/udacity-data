WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:03.710
To understand what parameters I have available to me,

00:00:03.710 --> 00:00:05.530
going back to the sklearn documentation.

00:00:05.530 --> 00:00:06.830
So this should look kind of familiar.

00:00:06.830 --> 00:00:08.900
We found this through Google, remember?

00:00:08.900 --> 00:00:11.610
I am going to scroll down a little bit until I find the DecisionTreeClassifier

00:00:11.610 --> 00:00:15.010
this being documented here and

00:00:15.010 --> 00:00:16.309
I am just going to click on this link.

00:00:17.520 --> 00:00:20.970
And, this takes me to the specific page that's about the DecisionTreeClassifier.

00:00:20.970 --> 00:00:23.660
And this box right here is what I'm looking for.

00:00:23.660 --> 00:00:26.510
This is going to tell me all of the parameters that I

00:00:26.510 --> 00:00:28.880
have available to me when I'm creating my classifier.

00:00:30.010 --> 00:00:34.200
So, I can see that there's a whole lot that's going on here that I can tune.

00:00:34.200 --> 00:00:40.710
There's something called the criterion, there's the splitter, there's max depth.

00:00:40.710 --> 00:00:45.780
There's minimum number of samples in the split, minimum samples in the leaf, and

00:00:45.780 --> 00:00:47.260
so on and so on.

00:00:47.260 --> 00:00:50.370
So, these are all things that I can try tuning.

00:00:50.370 --> 00:00:51.400
So, let me pick one of these.

00:00:51.400 --> 00:00:54.150
We're going to look at the min's sample split.

00:00:54.150 --> 00:00:57.610
We can see if by tuning the min_sample_split,

00:00:57.610 --> 00:01:00.620
maybe, we can alleviate some of that overfitting that we

00:01:00.620 --> 00:01:03.380
were seeing in the example that I just showed you.

00:01:03.380 --> 00:01:06.210
So, here's what min_sample_split does.

00:01:06.210 --> 00:01:07.730
Say, I have my decision tree.

00:01:08.950 --> 00:01:10.690
Start out with a bunch of training examples,

00:01:10.690 --> 00:01:16.830
then I start to split them into smaller sub-samples.

00:01:16.830 --> 00:01:21.560
At some point, I have to figure out if I'm going to keep splitting any further.

00:01:21.560 --> 00:01:25.050
So, for example, if I start out with 100 examples here,

00:01:25.050 --> 00:01:29.190
then maybe I get 60 and 40.

00:01:29.190 --> 00:01:32.150
And maybe, I get 40 and 20.

00:01:32.150 --> 00:01:36.820
And then, maybe, this 20 turns into 15.

00:01:36.820 --> 00:01:39.790
And, five and so on and so on.

00:01:39.790 --> 00:01:43.320
So, the question is for each one of these bottom most sort of

00:01:43.320 --> 00:01:46.750
layers in the tree whether I want to keep splitting it.

00:01:46.750 --> 00:01:49.290
If it seems like that might be a good idea.

00:01:49.290 --> 00:01:53.070
And, that's what min_samples_split governs is basically whether I

00:01:53.070 --> 00:01:54.270
can keep splitting or not.

00:01:54.270 --> 00:01:57.760
Whether there's enough samples that are available to me to continue to

00:01:57.760 --> 00:01:59.150
split further.

00:01:59.150 --> 00:02:01.771
So, the the default number for min-sample-split is two.

00:02:03.040 --> 00:02:07.290
So, all of these nodes I can further split except for one of them.

00:02:07.290 --> 00:02:10.979
So my question for you is which of these nodes

00:02:13.770 --> 00:02:18.400
here are a few of your choices would I not be allowed to split any further?

