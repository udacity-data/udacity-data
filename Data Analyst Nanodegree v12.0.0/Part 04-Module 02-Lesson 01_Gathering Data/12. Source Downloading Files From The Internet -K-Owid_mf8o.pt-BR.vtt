WEBVTT
Kind: captions
Language: pt-BR

00:00:00.434 --> 00:00:04.901
A biblioteca Requests do Python
facilita os pedidos HTTP.

00:00:04.934 --> 00:00:07.033
Ela tem um método
chamado "get",

00:00:07.067 --> 00:00:08.634
que envia o pedido para nós,

00:00:08.667 --> 00:00:13.133
devolve o conteúdo do arquivo
solicitado, um arquivo de texto,

00:00:13.167 --> 00:00:16.100
e que salvamos como arquivo.

00:00:16.133 --> 00:00:20.133
É assim que se baixa um arquivo
da Internet programaticamente.

00:00:20.167 --> 00:00:22.667
É assim que se faz,
bastante simples:

00:00:22.701 --> 00:00:24.601
importamos
a biblioteca Request

00:00:24.634 --> 00:00:26.934
e também importamos
a biblioteca OS também

00:00:26.968 --> 00:00:31.267
para guardar o arquivo baixado
em uma pasta, "ebert_reviews".

00:00:31.300 --> 00:00:36.000
Esse pedaço de código cria a pasta
se ela ainda não existir.

00:00:36.033 --> 00:00:38.901
Aqui entra a parte
do código Request.

00:00:38.934 --> 00:00:43.734
Usamos requests.get em uma URL
e isso nos devolve uma resposta.

00:00:43.767 --> 00:00:48.434
Vou passar a URL para vocês,
a URL para o arquivo de texto

00:00:48.467 --> 00:00:52.234
com as críticas de Roger Ebert
que salvei no servidor do Udacity.

00:00:52.267 --> 00:00:54.734
Ainda não salvamos
a resposta para nada,

00:00:54.767 --> 00:00:58.067
mas vamos ver como é
essa variável de resposta.

00:00:58.100 --> 00:01:00.601
Temos "response 200".

00:01:00.634 --> 00:01:05.701
200 é o código de status HTTP
de resposta bem-sucedida,

00:01:05.734 --> 00:01:07.067
o que é bom.

00:01:07.100 --> 00:01:10.601
Essa resposta voltou
do método "responses.get".

00:01:11.434 --> 00:01:13.601
Você não consegue ver,
mas todos os textos

00:01:13.634 --> 00:01:16.467
em nosso arquivo de textos
estão na memória de trabalho

00:01:16.501 --> 00:01:19.834
do nosso computador, agora,
dentro dessa variável de resposta.

00:01:19.868 --> 00:01:24.734
Fica guardada no corpo da resposta,
que pode ser acessado por ".content",

00:01:24.767 --> 00:01:29.067
como mostrado na documentação
da biblioteca Request. Vamos ver.

00:01:29.801 --> 00:01:33.467
Aí está.
Está em formato de bytes.

00:01:33.501 --> 00:01:36.400
Usando isso
e arquivos básicos IO,

00:01:36.434 --> 00:01:39.634
vamos salvar esse arquivo
em nosso computador.

00:01:39.667 --> 00:01:45.434
Vamos abrir um arquivo chamado
"11-e.t-the-extra-terrestrial.txt",

00:01:46.133 --> 00:01:49.701
isto é, tudo depois
da última barra dessa URL.

00:01:49.734 --> 00:01:52.033
Para pegar tudo que vem depois
da última barra,

00:01:52.067 --> 00:01:53.901
usaremos a função split
do Python

00:01:53.934 --> 00:01:56.501
e selecionaremos o último item
da lista que retornou.

00:01:56.534 --> 00:01:59.801
Precisamos abrir esse arquivo,
que vai escrever o conteúdo

00:01:59.834 --> 00:02:01.734
da variável de resposta.

00:02:01.767 --> 00:02:04.934
Temos que abri-lo em modo WB,
Write Binary,

00:02:04.968 --> 00:02:09.167
porque "response.content"
está em bytes, não em texto.

00:02:09.200 --> 00:02:11.834
Mas não se preocupe.
Quando abrirmos um editor de texto

00:02:11.868 --> 00:02:14.701
ou o Pandas depois,
os bytes serão renderizados

00:02:14.734 --> 00:02:16.567
como texto legível.

00:02:16.601 --> 00:02:19.133
Então escrevemos
para o file handle que abrimos,

00:02:19.167 --> 00:02:23.667
"file.write.response.content".
Isso deve bastar.

00:02:23.701 --> 00:02:26.801
É assim que se baixa um arquivo
programaticamente,

00:02:26.834 --> 00:02:29.734
Vamos ver o conteúdo
de nossa pasta, ebert_reviews,

00:02:29.767 --> 00:02:31.367
para saber se funcionou.

00:02:31.400 --> 00:02:33.200
Aí está.

00:02:33.234 --> 00:02:37.534
Esse .DS_Store é um arquivo oculto
que armazena os atributos da pasta.

00:02:37.567 --> 00:02:38.834
Ignore-o por ora.

00:02:38.868 --> 00:02:41.767
Se você for para o painel
de indicadores do Jupyter Notebook,

00:02:41.801 --> 00:02:46.033
e abrir o arquivo, verá que ele
foi baixado corretamente.

00:02:46.067 --> 00:02:48.701
Então, de novo, é assim
que se baixa um arquivo.

00:02:48.734 --> 00:02:51.033
Mas se temos
muitos arquivos para baixar,

00:02:51.067 --> 00:02:56.000
como as críticas de Ebert
para o Rotten Tomatoes,

00:02:56.033 --> 00:02:59.334
escrever essas declarações
várias vezes seria um tédio.

00:02:59.367 --> 00:03:03.167
Por sorte, baixar arquivos
programaticamente é simples.

00:03:03.200 --> 00:03:06.200
Você pode usar um loop "for"
por todas as URLs do arquivo

00:03:06.234 --> 00:03:08.467
para minimizar
a repetição de código.

00:03:08.501 --> 00:03:11.501
Eu já passei quais são as URLs,
para sorte de vocês.

00:03:11.534 --> 00:03:14.701
A tarefa agora é escrever o loop
e baixar programaticamente

00:03:14.734 --> 00:03:16.968
todos os arquivos
com críticas de Roger Ebert.

