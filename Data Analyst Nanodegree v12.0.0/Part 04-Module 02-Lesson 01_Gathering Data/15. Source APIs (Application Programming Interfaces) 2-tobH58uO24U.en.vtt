WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.585
The goal is to get these movie poster images somehow.

00:00:03.585 --> 00:00:06.474
The one displayed here is for E.T.

00:00:06.474 --> 00:00:13.739
So, Rotten Tomatoes actually does have an API and it does provide audience scores,

00:00:13.740 --> 00:00:17.100
which means we could have hit the API instead of scraping it

00:00:17.100 --> 00:00:20.750
off of the Rotten Tomatoes web page earlier in the lesson.

00:00:20.750 --> 00:00:24.990
But this API doesn't provide posters and images, unfortunately.

00:00:24.989 --> 00:00:28.629
Even if they did, this API is one that requires you to

00:00:28.629 --> 00:00:33.295
apply for access before using it via a proposal form.

00:00:33.295 --> 00:00:35.015
This isn't uncommon.

00:00:35.015 --> 00:00:39.475
This API wasn't going to be scalable enough for use in this course anyway.

00:00:39.475 --> 00:00:44.005
When given a choice the rule of thumb is always pick the API over scraping.

00:00:44.005 --> 00:00:46.790
As this answer on Stack Overflow suggests,

00:00:46.789 --> 00:00:50.494
pause the video and take a second to read this if you'd like.

00:00:50.494 --> 00:00:53.299
Scraping is brittle and breaks with

00:00:53.299 --> 00:00:57.919
web layout redesigns because the underlying HTML has changed.

00:00:57.920 --> 00:01:01.870
Imagine for a second that we did have access to the Rotten Tomatoes API though.

00:01:01.869 --> 00:01:05.694
APIs on the left and their access libraries,

00:01:05.694 --> 00:01:08.179
an example of which is on the right allow

00:01:08.180 --> 00:01:11.870
programmers to access data in a super simple manner.

00:01:11.870 --> 00:01:16.344
You'll learn difference between an API and an access library in a second.

00:01:16.344 --> 00:01:18.829
But first here's an example of how simple it would

00:01:18.829 --> 00:01:21.079
have been to get the audience score data using

00:01:21.079 --> 00:01:28.054
the Rotten Tomatoes API and this rotten tomatoes API access library called rtsimple.

00:01:28.055 --> 00:01:34.120
As written here rtsimple is a wrapper written in Python for the Rotten Tomatoes API.

00:01:34.120 --> 00:01:40.859
First, we import the rtsimple library as the alias rt then we set our API key.

00:01:40.859 --> 00:01:45.194
This is what Rotten Tomatoes is hiding behind that proposal form vetting process.

00:01:45.194 --> 00:01:48.199
And we create this movie object with

00:01:48.200 --> 00:01:51.858
this simple bit of code and the movie ID, which for E.T.

00:01:51.858 --> 00:01:54.950
is 10489, and then we access the

00:01:54.950 --> 00:01:59.314
ratings using.ratings and the audience_score in these brackets.

00:01:59.314 --> 00:02:02.254
If we had an API key and were to run this cell,

00:02:02.254 --> 00:02:07.039
the audience_score rating of 72 for E.T would have been printed out below here.

00:02:07.040 --> 00:02:09.770
So compared to scraping this is less brittle and I'd argue despite

00:02:09.770 --> 00:02:13.960
beautifulsoup being pretty simple I'd argue that this is more intuitive code.

00:02:13.960 --> 00:02:17.466
So because we can't use the Rotten Tomatoes API for this lesson,

00:02:17.466 --> 00:02:21.080
enter Wikipedia, and specifically, MediaWiki.

00:02:21.080 --> 00:02:25.370
MediaWiki is an API that hosts all of the Wikipedia data.

00:02:25.370 --> 00:02:28.460
Next, you'll get into how APIs work under the hood using

00:02:28.460 --> 00:02:32.000
MediaWiki and a popular access library for Python.

