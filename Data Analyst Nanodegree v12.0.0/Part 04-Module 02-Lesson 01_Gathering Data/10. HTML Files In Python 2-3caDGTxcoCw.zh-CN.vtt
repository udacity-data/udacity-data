WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.000
空白的字典名单

00:00:03.000 --> 00:00:04.935
df_list 已经提供给你

00:00:04.934 --> 00:00:11.079
以及在我们 rt_html 文件夹中循环每个文件的 for 循环

00:00:11.080 --> 00:00:13.410
要做的第一件事是就是制作 soup

00:00:13.410 --> 00:00:16.995
我们的方法是将文件传递至文件句柄中

00:00:16.995 --> 00:00:18.632
或者你给文件句柄起的任何名称

00:00:18.632 --> 00:00:21.900
从 HTML 中抓取的第一个对象就是名称

00:00:21.899 --> 00:00:25.469
电影名称 这件事我们之前已经完成过

00:00:25.469 --> 00:00:29.714
再次使用 find 法获得文档中的唯一名称标签

00:00:29.714 --> 00:00:32.789
然后利用 .contents 访问该文件的内容

00:00:32.789 --> 00:00:39.670
抓取标签中的第一个项目 截取最后的 ‘- Rotten Tomatoes’

00:00:39.670 --> 00:00:43.079
我们来看下 稍加调试

00:00:43.079 --> 00:00:44.274
以免有任何部分出错

00:00:44.274 --> 00:00:46.854
所以 我们再使用这个循环一次

00:00:46.854 --> 00:00:49.019
然后 打出我们在这里具有的名称变量

00:00:49.020 --> 00:00:50.645
然后 中断循环

00:00:50.645 --> 00:00:53.185
这就是规范做法 好的 名称得到了

00:00:53.185 --> 00:00:56.224
实际上我忘了指定 lxml 解析器

00:00:56.223 --> 00:00:59.454
其实这样也没关系 但我还是会指定它的

00:00:59.454 --> 00:01:01.199
好的 我们现在就开始 没有警告

00:01:01.200 --> 00:01:04.070
下一个要抓取的对象是 audience_score

00:01:04.069 --> 00:01:07.379
我们来看看 HTML 代码 看看它在哪里

00:01:07.379 --> 00:01:10.019
在 72% 处 它确实在

00:01:10.019 --> 00:01:14.409
class 名称为 audience-score meter 的 div 内部

00:01:14.409 --> 00:01:17.670
如果再仔细看下 你就会发现 72%

00:01:17.670 --> 00:01:21.795
在最外侧 div 标签内的唯一一个 span 标签中

00:01:21.795 --> 00:01:24.655
最外侧的 div 标签就是这个 div

00:01:24.655 --> 00:01:27.564
其 class 就是 audience-score meter

00:01:27.564 --> 00:01:29.204
由于它是第一个 span 标签

00:01:29.204 --> 00:01:31.284
我们可以使用 .find 方法

00:01:31.284 --> 00:01:37.054
它是一个 beautiful soup 以获得我们利用 find 搜索的任意标签中的第一个标签

00:01:37.055 --> 00:01:42.795
但首先 我们必须识别 class 为 audience-score meter 的 div

00:01:42.795 --> 00:01:44.844
这也是采用类似方法完成的

00:01:44.844 --> 00:01:47.310
请注意 class 的后面必须有一个下划线

00:01:47.310 --> 00:01:50.810
这是因为 class 是 Python 中的一个保留关键词

00:01:50.810 --> 00:01:53.894
我们将找到这个 div 中的第一个 span 标签

00:01:53.894 --> 00:01:57.524
现在我们稍稍休息一下 看看我们讲到代码的哪个部分了

00:01:57.525 --> 00:01:58.760
我们将再使用循环一次

00:01:58.760 --> 00:01:59.960
打出 audience score

00:01:59.959 --> 00:02:03.774
然后再次中断循环 好的 这一切看起来很顺利

00:02:03.775 --> 00:02:05.200
它将使用 .contents 访问该标签的内容

00:02:05.200 --> 00:02:09.490
而且由于它是这个标签中的第一个 也是唯一一个项目

00:02:09.490 --> 00:02:12.870
所以 我们使用索引 0 即

00:02:12.870 --> 00:02:17.710
.contents 返回的名单中的第一个项目 我们马上就讲到那里了

00:02:17.710 --> 00:02:21.870
我们实际上并不想要这个百分比符号

00:02:21.870 --> 00:02:25.270
所以 我们将利用基本的字符串截取功能去除它

00:02:25.270 --> 00:02:29.310
抓取字符串中除最后一个字符以外的所有字符 很好

00:02:29.310 --> 00:02:31.625
我们就得到观众评分了

00:02:31.625 --> 00:02:35.004
现在 该抓取观众评分的数量了

00:02:35.004 --> 00:02:37.400
这个有点复杂

00:02:37.400 --> 00:02:40.064
我们再看下 HTML 代码

00:02:40.064 --> 00:02:42.569
如果我们向下滚动一点 我们就会见到用户评分

00:02:42.569 --> 00:02:45.709
或观众评分数量了

00:02:45.710 --> 00:02:47.014
这适用于电影《ET 外星人》 HTML 页面

00:02:47.014 --> 00:02:51.555
但这个结构适用于我们下载的所有文件

00:02:51.555 --> 00:02:52.944
所以 在这里 虽然不是太清楚

00:02:52.944 --> 00:02:55.979
但最外侧的 div 标签就是

00:02:55.979 --> 00:03:02.054
class 为 audience-info hidden-xs superPageFontColor 的这个标签

00:03:02.055 --> 00:03:04.469
所以 我们利用 BeautifulSoup 来放大它

00:03:04.469 --> 00:03:07.685
敲出来太麻烦 所以我复制粘贴到这里

00:03:07.685 --> 00:03:11.284
我们再次使用循环、显示和中断策略

00:03:11.284 --> 00:03:13.430
这样就更清晰一些了

00:03:13.430 --> 00:03:16.335
这就是我们所指定 class 的最外侧 div

00:03:16.335 --> 00:03:20.754
audience-info hidden-xs superPageFontColor

00:03:20.754 --> 00:03:24.509
该 div 标签内有两个其他的 div 标签

00:03:24.509 --> 00:03:28.129
观众评分的数量在第二个 div 标签内

00:03:28.129 --> 00:03:33.174
我们可以使用 find all 选取返回名单中的第二个项目

00:03:33.175 --> 00:03:35.795
第二个项目就是索引数字 1

00:03:35.794 --> 00:03:37.254
接着 如果我们看看这里的内容

00:03:37.254 --> 00:03:40.335
我们会见到我们的观众评分数量

00:03:40.335 --> 00:03:42.480
第三个项目索引数字 2

00:03:42.479 --> 00:03:46.929
这里有一连串的白色空格 我们将使用 Python strip 函数剔除它

00:03:46.930 --> 00:03:49.200
我们几乎完成了

00:03:49.199 --> 00:03:51.284
目前这就是字符串形式

00:03:51.284 --> 00:03:53.819
我们稍后必须转换成整数 为此

00:03:53.819 --> 00:03:56.199
我们必须删除这些逗号

00:03:56.199 --> 00:03:58.574
所以 我们使用 Python replace 函数来做这件事

00:03:58.574 --> 00:04:01.204
用空字符替换逗号

00:04:01.205 --> 00:04:03.045
我们马上开始

00:04:03.044 --> 00:04:05.919
接下来要做的就是将我们的字典名单

00:04:05.919 --> 00:04:08.734
df_list 转换成一个 Pandas DataFrame

00:04:08.735 --> 00:04:13.155
首先 我们将确保 Pandas 库已导入 且别名为 PD

00:04:13.155 --> 00:04:15.265
接着 我们将指定列序号

00:04:15.264 --> 00:04:16.985
应该是这样

00:04:16.985 --> 00:04:18.745
我们来处理这个单元格

00:04:18.745 --> 00:04:20.535
这运行起来可能需要花费一点时间

00:04:20.535 --> 00:04:24.110
对我而言 大约 15 秒钟左右

00:04:24.110 --> 00:04:26.879
非常好 没有错误

00:04:26.879 --> 00:04:28.665
我们来看看这个 DataFrame

00:04:28.665 --> 00:04:31.080
太棒了 我们这就开始

