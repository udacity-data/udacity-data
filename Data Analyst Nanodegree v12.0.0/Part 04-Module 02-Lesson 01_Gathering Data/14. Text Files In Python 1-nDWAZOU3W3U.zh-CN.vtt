WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.575
在 Python 中收集文本文件的数据意味着要打开和读取文件

00:00:05.575 --> 00:00:07.875
如果和我们一样 你正在使用 Pandas

00:00:07.875 --> 00:00:13.129
还意味着要在 Pandas DataFrame中存储刚读取的文本数据

00:00:13.130 --> 00:00:17.295
我们共有 88 条 Roger Ebert 影评要打开和读取

00:00:17.295 --> 00:00:19.560
要打开并读取文档

00:00:19.559 --> 00:00:22.769
我们需要循环迭代此文件夹中的所有文件

00:00:22.769 --> 00:00:25.814
此处有两种方法可用

00:00:25.815 --> 00:00:30.789
一种是通过 OS 库完成 另一种是使用名为 glob 的库完成

00:00:30.789 --> 00:00:35.089
在本节课中 我们目前使用的是 os.listdir

00:00:35.090 --> 00:00:36.935
它的效果很好

00:00:36.935 --> 00:00:39.395
如果你确定要打开文件夹中的每个文件 比如此处的案例

00:00:39.395 --> 00:00:43.630
文件夹中的每个文件都是 Roger Ebert 影评文件

00:00:43.630 --> 00:00:47.100
但让我们换为 glob 代替

00:00:47.100 --> 00:00:52.395
glob 库允许 Unix 风格的路径名模式扩展

00:00:52.395 --> 00:00:53.825
这是一种漂亮说法

00:00:53.825 --> 00:00:59.780
使用 glob 模式详细说明多个文件名

00:00:59.780 --> 00:01:03.725
这些 glob 模式使用通配符

00:01:03.725 --> 00:01:08.540
文档介绍和通篇浏览颇费时间

00:01:08.540 --> 00:01:15.032
所以 我暂时想让你只看这个东西 glob.glob

00:01:15.031 --> 00:01:19.099
它会返回一个与 pathname 匹配的路径名称

00:01:19.099 --> 00:01:21.579
即你输入此处的字符串参数

00:01:21.579 --> 00:01:24.239
这就是 glob 模式发挥作用的地方

00:01:24.239 --> 00:01:25.719
我们怎么用呢？

00:01:25.719 --> 00:01:28.000
我们想要的文件名称都以 .txt 结尾

00:01:28.000 --> 00:01:31.844
文件都在 Ebert 影评文件夹中

00:01:31.844 --> 00:01:34.929
因为 glob.glob 会返回一个列表

00:01:34.930 --> 00:01:37.565
我们可以直接对其循环

00:01:37.564 --> 00:01:40.459
这就是 glob 模式下的通配符

00:01:40.459 --> 00:01:43.143
文件夹中的所有项为 ebert_reviews

00:01:43.144 --> 00:01:46.792
然后是以 .txt 结尾的每个单独文件

00:01:46.792 --> 00:01:51.840
星号指匹配任何长度的字符串

00:01:51.840 --> 00:01:55.719
让我们打印输出此处所有文件的路径

00:01:55.719 --> 00:01:57.924
你想象得到这会有多实用

00:01:57.924 --> 00:02:01.524
假设此文件夹中的每个文件都没有以 .txt 结尾 例如

00:02:01.525 --> 00:02:07.440
你可以把每个文件的完整路径传入 Python 的 open 函数中

00:02:07.439 --> 00:02:11.597
在我们打开此类文件期间

00:02:11.598 --> 00:02:13.480
使用 open 函数然后是文件路径 输入 as file

00:02:13.479 --> 00:02:16.514
任何文件句柄均可

00:02:16.514 --> 00:02:19.282
在 Python 3 中 打开文本读取时

00:02:19.282 --> 00:02:22.709
你应始终使用具有明确编码的 open 函数

00:02:22.710 --> 00:02:25.849
明确编码跟在 encoding 参数之后

00:02:25.849 --> 00:02:29.039
这样做是为了 Unicode 正确解码

00:02:29.039 --> 00:02:30.824
否则立即出现错误

00:02:30.824 --> 00:02:33.354
这样做让调试更容易

00:02:33.354 --> 00:02:36.509
再次 我们在本课程前面尚未这样处理

00:02:36.509 --> 00:02:39.983
因为我不想讲过多有关编码的知识

00:02:39.983 --> 00:02:41.245
但现在正是讲讲的好时机

00:02:41.245 --> 00:02:44.879
接下来打开的代码应该是这样的

00:02:44.879 --> 00:02:46.694
实际编码是什么？

00:02:46.694 --> 00:02:49.164
那取决于文本来源

00:02:49.164 --> 00:02:54.234
我们使用 Roger Ebert 对电影 《卡萨布兰卡》 的影评文件作为操作范例

00:02:54.235 --> 00:02:55.950
但要记住 这适用于所有此类文件

00:02:55.949 --> 00:02:58.185
因为它们采集自同一个网站

00:02:58.185 --> 00:03:00.180
如果我们要检查本页面来源

00:03:00.180 --> 00:03:03.165
可以在其它浏览器中

00:03:03.164 --> 00:03:06.810
右键点击 “查看页面源代码”或类似选项

00:03:06.810 --> 00:03:10.569
你会发现此处的编码是 utf-8

00:03:10.569 --> 00:03:15.174
很好 让我们打开这部电影的文本文件

00:03:15.175 --> 00:03:19.650
实际上 我们不想要所有文本数据都在一个数据块中

00:03:19.650 --> 00:03:22.134
而应这样操作

00:03:22.133 --> 00:03:25.589
输入file.read ( ) 我们可以借助 print 语句检查 glob 循环中的一个文件

00:03:25.590 --> 00:03:30.224
然后断开循环

00:03:30.224 --> 00:03:33.134
这是《绿野仙踪》文件的全部影评

00:03:33.134 --> 00:03:35.509
它是文件夹中的第一个文件

00:03:35.509 --> 00:03:38.074
相反 我们想要的是第一行 即这部电影名

00:03:38.074 --> 00:03:40.675
想要的第二行 即 URL

00:03:40.675 --> 00:03:45.609
然后从第三行的之后的所有内容 即影评文本

00:03:45.610 --> 00:03:49.445
我们想要这三项作数据独立存在

00:03:49.444 --> 00:03:52.114
所以 我们不能只使用 file.read

00:03:52.115 --> 00:03:53.700
由于文本文件被换行符隔开

00:03:53.699 --> 00:03:58.769
而且通过 with open as file 返回的文件对象是

00:03:58.770 --> 00:04:01.020
一个迭代文件

00:04:01.020 --> 00:04:03.675
我们可以逐行读取文件

00:04:03.675 --> 00:04:05.855
如果你只是想读取一行

00:04:05.854 --> 00:04:10.704
你会用 .readline 像这样

00:04:10.705 --> 00:04:14.235
使用 print 检查 再次使用 break 策略

00:04:14.235 --> 00:04:17.585
文件第一行是电影名称

00:04:17.584 --> 00:04:19.859
此处下方实际上有一些空行

00:04:19.860 --> 00:04:22.759
这实际上是 \n

00:04:22.759 --> 00:04:24.649
或者说换行符

00:04:24.649 --> 00:04:27.764
我们可以在这些字符串的末尾进行切片

00:04:27.764 --> 00:04:30.639
就这么办 于是我们得到了电影名称

00:04:30.639 --> 00:04:34.300
接下来 你将捕获 URL 和完整的影评文本

00:04:34.300 --> 00:04:39.125
在此之前 回想下我们想要所有此类数据都在 pandas DataFrame 中

00:04:39.125 --> 00:04:40.697
所以 我们需要创建一个DataFrame

00:04:40.697 --> 00:04:44.060
最具计算效率的方法是

00:04:44.060 --> 00:04:49.459
首先创建一个空表 然后在循环迭代过程中逐一填充表格

00:04:49.459 --> 00:04:51.834
我们用字典填充此列表

00:04:51.834 --> 00:04:56.060
然后将此列表转换成 Pandas DataFrame

00:04:56.060 --> 00:04:59.009
一下子 所有收据都收集好了

00:04:59.009 --> 00:05:02.629
现在 轮到你操作了 你的任务是获取影评 URL

00:05:02.629 --> 00:05:05.029
然后获取完整影评文本

00:05:05.029 --> 00:05:08.159
并将其“添加 (append)” 到字典列表

