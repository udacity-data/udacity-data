WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.669
文本文件指使用特定字符集的一种文件

00:00:02.669 --> 00:00:05.894
不含有任何格式

00:00:05.894 --> 00:00:07.604
比如斜体或加粗样式

00:00:07.605 --> 00:00:09.165
文本文件也没有媒体功能

00:00:09.164 --> 00:00:10.679
比如图像或视频

00:00:10.679 --> 00:00:16.390
在 Python 中 文本行尾采用换行符或反斜线分隔

00:00:16.390 --> 00:00:21.010
这些字符在大部分软件中都是不可见的 比如 这个文本编辑器

00:00:21.010 --> 00:00:22.480
说到文本编辑器

00:00:22.480 --> 00:00:27.050
它可以查看和编辑文本文件 这毫无疑问

00:00:27.050 --> 00:00:29.949
平面文件 比如此图显示的 TSB 文件

00:00:29.949 --> 00:00:31.875
从技术上讲平面文件也是文本文件的一种

00:00:31.875 --> 00:00:34.159
但是 它们有特定的结构

00:00:34.159 --> 00:00:38.534
这些 Roger Ebert 影评文本文件只是一些大对象数据类型文本

00:00:38.534 --> 00:00:43.144
无定义的结构 比如 TSB 格式的表格结构

00:00:43.145 --> 00:00:46.040
现在你要关注这个没有结构的文本文件

00:00:46.039 --> 00:00:48.729
它只是一份大对象数据类型文本 是文本文件的一种

00:00:48.729 --> 00:00:51.814
无论文本是什么结构

00:00:51.814 --> 00:00:55.519
此处应用的所有方法对任何文本文件都适用

00:00:55.520 --> 00:00:57.620
对于特定的字符集

00:00:57.619 --> 00:01:01.774
你是否曾经打开某个文件后发现字符都这样混乱？

00:01:01.774 --> 00:01:03.844
就像一串成列的问号“？”

00:01:03.844 --> 00:01:06.914
或是一串奇怪的字符 比如这些

00:01:06.915 --> 00:01:09.005
那是因为正在努力读取文档的文本编辑器、浏览器、文字处理器或其它软件

00:01:09.004 --> 00:01:13.039
将字符集位数转换成字母和数字时

00:01:13.040 --> 00:01:16.010
采用了错误编码方式或

00:01:16.010 --> 00:01:20.385
采用的方法错误

00:01:20.385 --> 00:01:25.290
你只需选择正确的编码来显示文档即可

00:01:25.290 --> 00:01:28.215
处理文本数据时

00:01:28.215 --> 00:01:31.859
字符集和编码是每位程序员须谨记的事

00:01:31.859 --> 00:01:36.950
包括 CSV、HTML 和 Json 格式的平面文件

00:01:36.950 --> 00:01:40.369
后两者格式尚未提到 不过我们很快就会讲到

00:01:40.370 --> 00:01:42.885
我提供了两篇相关热门文章的链接

00:01:42.885 --> 00:01:46.945
这篇 还有这篇

00:01:46.944 --> 00:01:52.039
这些文章将论点证明得一清二楚

00:01:52.040 --> 00:01:55.160
花上一点时间 阅读这篇文章

00:01:56.459 --> 00:02:03.593
这篇文章由 Joel Spolsky 所写 很有趣

00:02:03.593 --> 00:02:06.319
对无关紧要的技术细节轻描淡写

00:02:06.319 --> 00:02:09.814
第二篇文章是第一篇文章的回答

00:02:09.814 --> 00:02:11.689
填补了技术上的空白

00:02:11.689 --> 00:02:15.000
如果你对这些话题不熟悉 可以把两篇文章都读读

