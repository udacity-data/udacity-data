WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.784
Displayed here is the E.T.

00:00:01.784 --> 00:00:05.070
Rotten Tomatoes HTML data.

00:00:05.070 --> 00:00:07.530
HTML files are text files that can be opened and

00:00:07.530 --> 00:00:11.019
inspected in text editors, like Sublime here.

00:00:11.019 --> 00:00:15.509
This means you can write your own code to parse or understand the text.

00:00:15.509 --> 00:00:17.879
Sure, there's some confusing code at the top here,

00:00:17.879 --> 00:00:20.279
but the actual text content of the web page,

00:00:20.280 --> 00:00:25.740
like the title and the critic and audience scores for example, that's pretty simple.

00:00:25.739 --> 00:00:28.004
Like to get our audience score metrics,

00:00:28.004 --> 00:00:32.954
we could find all instances of the span tag in the text using something like Python

00:00:32.954 --> 00:00:37.640
str.find function or a fancier tool called regular expressions,

00:00:37.640 --> 00:00:40.435
to search for and extract patterns in text.

00:00:40.435 --> 00:00:42.740
But, once again, people have come before us

00:00:42.740 --> 00:00:45.910
and solved this problem in a spectacular fashion.

00:00:45.909 --> 00:00:50.659
Beautiful Soup is a HTML parser written in the Python programming language.

00:00:50.659 --> 00:00:53.389
The name is derived from the tag soup term,

00:00:53.390 --> 00:00:58.895
in reference to the unstructured and almost unparsable HTML found on most web sites.

00:00:58.895 --> 00:01:00.679
Pause the video and take a second to read

00:01:00.679 --> 00:01:04.629
the library's rather convincing testimonials if you'd like.

00:01:04.629 --> 00:01:09.359
So, let's use this to extract the title of the movie from our E.T.

00:01:09.359 --> 00:01:14.680
HTML page. We'll need this later when we're joining all of out gathered pieces of data.

00:01:14.680 --> 00:01:16.864
So we'll go to the documentation.

00:01:16.864 --> 00:01:20.599
The first thing you need to do is make the soup.

00:01:20.599 --> 00:01:24.649
That means passing the path to your HTML file into a file handle,

00:01:24.650 --> 00:01:28.825
then passing that file handle into the Beautiful Soup constructor, like so.

00:01:28.825 --> 00:01:32.082
That's after importing the Beautiful Soup library of course.

00:01:32.082 --> 00:01:36.066
And let's try this with our Rotten Tomatoes E.T.

00:01:36.066 --> 00:01:39.200
HTML which is stored in this rt_html folder.

00:01:39.200 --> 00:01:40.564
So, there's our file path,

00:01:40.564 --> 00:01:43.519
and we passed it into this file handle, file.

00:01:43.519 --> 00:01:45.125
They have FP as file handle,

00:01:45.125 --> 00:01:47.420
but we've been using files so, let's stick with this.

00:01:47.420 --> 00:01:49.519
So, Beautiful Soup throws this warning which is

00:01:49.519 --> 00:01:52.280
telling us that we didn't specify a specific parser.

00:01:52.280 --> 00:01:55.010
Pause the video and take a second to read this if you'd like.

00:01:55.010 --> 00:01:59.385
By default, they actually picked the most popular parser for us which is called lxml,

00:01:59.385 --> 00:02:03.185
and we'll actually pass this in here to get rid of this warning.

00:02:03.185 --> 00:02:06.745
And we have our Soup, our Beautiful Soup.

00:02:06.745 --> 00:02:09.830
This looks exactly like an HTML document, but in actuality,

00:02:09.830 --> 00:02:12.410
we can use methods in the Beautiful Soup library to

00:02:12.409 --> 00:02:16.000
easily find and extract data from this HTML.

00:02:16.000 --> 00:02:19.354
One of the most popular methods is the find method.

00:02:19.354 --> 00:02:22.294
Let's find the title of our movie using this method.

00:02:22.294 --> 00:02:25.514
Pause the video and take a second to read the first paragraph here.

00:02:25.514 --> 00:02:27.984
It might not all make sense right away, but shortly it will.

00:02:27.985 --> 00:02:33.500
I promise you. Okay, so let's use find to get the title of our movie from our HTML.

00:02:33.500 --> 00:02:35.735
Think of Beautiful Soup's find method,

00:02:35.735 --> 00:02:37.877
like the find feature in a text editor.

00:02:37.877 --> 00:02:39.740
For example, i.e.

00:02:39.740 --> 00:02:41.564
Control+F or Command+F.

00:02:41.564 --> 00:02:43.900
And if we search for our title tag,

00:02:43.900 --> 00:02:47.705
we'll find that there's only one in this whole HTML document.

00:02:47.705 --> 00:02:50.240
And within that tag is the movie title that we want.

00:02:50.240 --> 00:02:52.800
E.T. the Extra-Terrestrial, 1982.

00:02:52.800 --> 00:02:57.865
And here's how that looks in Beautiful Soup code, and there it is.

00:02:57.865 --> 00:03:00.165
This title is actually the title of the web page and

00:03:00.164 --> 00:03:03.794
not the title of the movie which you can see up here.

00:03:03.794 --> 00:03:05.754
To get the movie title only,

00:03:05.754 --> 00:03:10.715
we'll have to do some simple string slicing to remove that and bit there.

00:03:10.715 --> 00:03:14.134
The space - space rotten space tomatoes.

00:03:14.134 --> 00:03:18.399
No worries, we can do that. Okay. So, to access the contents of this tag, i.e.

00:03:18.400 --> 00:03:21.235
whatever's within these opening and closing tags,

00:03:21.235 --> 00:03:23.500
we can use dot contents.

00:03:23.500 --> 00:03:28.645
Dot contents returns a list of the tags children and there's the list.

00:03:28.645 --> 00:03:31.080
Because there's only one thing within this tag,

00:03:31.080 --> 00:03:35.940
the list is one item long and we can never access it using the index 0.

00:03:35.939 --> 00:03:38.530
And here's what string slicing looks like to just get

00:03:38.530 --> 00:03:41.435
the movie title and the year the movie was released.

00:03:41.435 --> 00:03:44.770
This string splicing just grabbed everything from the first character in

00:03:44.770 --> 00:03:48.680
our string to the 18th last character.

00:03:48.680 --> 00:03:55.460
The length of the string space dash space rotten space tomatoes, being 18 characters.

00:03:55.460 --> 00:04:00.776
So, this xa0 thing is unicode for non-breaking space.

00:04:00.776 --> 00:04:02.905
Unicode stuff is something we'll cover shortly.

00:04:02.905 --> 00:04:05.449
So, don't worry if it doesn't make sense to you right now.

00:04:05.449 --> 00:04:07.079
The reason why I'm bringing this up is because

00:04:07.080 --> 00:04:11.790
the original Top 100 TSV file actually doesn't have a non-breaking space here,

00:04:11.789 --> 00:04:15.399
in between the end of the movie and the year of the movie release,

00:04:15.399 --> 00:04:16.764
it just has a regular space.

00:04:16.764 --> 00:04:19.229
So we'll have to standardize these when cleaning,

00:04:19.230 --> 00:04:22.645
so we can later join data frames on the title column.

00:04:22.644 --> 00:04:24.685
We actually won't do any cleaning in this lesson,

00:04:24.685 --> 00:04:26.120
so just keep this in mind for now.

