WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.179
Most data from APIs comes in JSON or XML format.

00:00:06.179 --> 00:00:12.024
On the left is the JSON tutorial from W3Schools and on the right is there's for XML.

00:00:12.025 --> 00:00:19.644
JSON stands for Javascript Object Notation and XML stands for Extensible Markup Language.

00:00:19.644 --> 00:00:22.024
They both have their use cases,

00:00:22.024 --> 00:00:24.904
but in this lesson you'll focus on JSON.

00:00:24.905 --> 00:00:29.900
In many situations, we're limited in what we can represent in tabular data.

00:00:29.899 --> 00:00:33.185
Sometimes we have data with fields that have multiple entries like,

00:00:33.185 --> 00:00:37.785
produced by, here, Kathleen Kennedy and Steven Spielberg, two entries.

00:00:37.784 --> 00:00:41.074
And sometimes fields have subfields like release date,

00:00:41.075 --> 00:00:44.465
having a date and also a location of release.

00:00:44.465 --> 00:00:48.475
May 26 1992 in Cannes for example,

00:00:48.475 --> 00:00:51.865
then also June 11 1982 in the States.

00:00:51.865 --> 00:00:55.624
Release date actually has multiple entries and multiple fields.

00:00:55.624 --> 00:00:59.484
Representing this data in tabular form would be weird.

00:00:59.484 --> 00:01:01.844
We'd need something like this.

00:01:01.844 --> 00:01:04.164
It's quite unnatural.

00:01:04.165 --> 00:01:07.840
Pause the video and take in for a second how weird this feels.

00:01:07.840 --> 00:01:11.079
As displayed here, JSON is especially

00:01:11.079 --> 00:01:14.409
great for representing and accessing complicated data hierarchies,

00:01:14.409 --> 00:01:16.795
like this Wikipedia info box.

00:01:16.795 --> 00:01:18.140
Let's go over the structure.

00:01:18.140 --> 00:01:21.269
So JSON is built on two key structures.

00:01:21.269 --> 00:01:23.229
The first one JSON objects,

00:01:23.230 --> 00:01:26.189
which are a collection of key value pairs.

00:01:26.188 --> 00:01:28.589
Objects are surrounded by curly braces.

00:01:28.590 --> 00:01:31.439
So this whole chunk of code here is one object,

00:01:31.439 --> 00:01:32.524
as displayed on the right.

00:01:32.525 --> 00:01:35.410
The left side of the screen is what the JSON code looks like.

00:01:35.409 --> 00:01:39.084
And the right side is a helpful collapsable interpretation of this code,

00:01:39.084 --> 00:01:40.909
we can collapse as object here.

00:01:40.909 --> 00:01:44.454
So back to the key value pairs part of the JSON object.

00:01:44.454 --> 00:01:49.314
Directed by, would be one key and Steven Spielberg would be the value for that key.

00:01:49.314 --> 00:01:53.004
Then after Spielberg we have a comma separating the key value pairs.

00:01:53.004 --> 00:01:55.599
In Python, JSON objects are interpreted as

00:01:55.599 --> 00:01:59.299
dictionaries and you can access them like you would a standard Python Dict.

00:01:59.299 --> 00:02:02.734
The second key of structure is called a JSON array,

00:02:02.734 --> 00:02:04.685
which is an ordered list of values.

00:02:04.685 --> 00:02:07.870
Here's an array in the value for the, produced by, key.

00:02:07.870 --> 00:02:10.090
Square brackets denote an array,

00:02:10.090 --> 00:02:11.930
which makes sense because in Python,

00:02:11.930 --> 00:02:16.405
JSON arrays are interpreted like lists and again they can be accessed as such.

00:02:16.405 --> 00:02:18.675
If you're familiar with other programming languages,

00:02:18.675 --> 00:02:24.448
the analogous data structure to a JSON object might be an object record struct,

00:02:24.448 --> 00:02:27.965
hash table, key list or associative array.

00:02:27.965 --> 00:02:29.485
Then for a JSONarray,

00:02:29.485 --> 00:02:32.395
the analogous data structure might be an array,

00:02:32.395 --> 00:02:34.335
vector or a sequence.

00:02:34.335 --> 00:02:37.507
While JSON object keys must be strings,

00:02:37.507 --> 00:02:41.879
you'll notice that every key on the left side here is a string.

00:02:41.879 --> 00:02:46.889
The values for both JSON objects and arrays can be any valid JSON data type.

00:02:46.889 --> 00:02:48.904
So a string, number,

00:02:48.905 --> 00:02:52.150
object, array, Boolean or null.

00:02:52.150 --> 00:02:55.770
There's a string, Steven Spielberg again and there's a number.

00:02:55.770 --> 00:03:00.650
The box office pay day in dollars or running time in minutes.

00:03:00.650 --> 00:03:04.835
And here's the JSON array as the value for the starring key.

00:03:04.835 --> 00:03:06.594
Take a look at the release key here.

00:03:06.594 --> 00:03:08.060
We have the string released as a key,

00:03:08.060 --> 00:03:11.525
then a JSONarray, which contains two JSON objects.

00:03:11.525 --> 00:03:14.049
When objects and arrays are combined like this,

00:03:14.049 --> 00:03:15.310
this is called nesting.

