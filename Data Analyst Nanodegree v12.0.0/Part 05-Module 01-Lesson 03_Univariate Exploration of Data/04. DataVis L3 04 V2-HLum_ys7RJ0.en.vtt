WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.480
Last time we left off by creating a bar chart of Pokemon by their first type.

00:00:04.480 --> 00:00:07.220
I've performed some data wrangling to obtain a data frame

00:00:07.219 --> 00:00:10.349
with both first and second types in a single column.

00:00:10.349 --> 00:00:14.089
I've also created some variables to get the types in order of frequency,

00:00:14.089 --> 00:00:16.589
and then plotted those counts in a bar chart.

00:00:16.589 --> 00:00:18.589
One thing that I'm interested in now,

00:00:18.589 --> 00:00:21.629
is what proportion of Pokemon have each type.

00:00:21.629 --> 00:00:23.869
While I might be able to estimate this from

00:00:23.870 --> 00:00:26.245
the plot by knowing the total number of Pokemon,

00:00:26.245 --> 00:00:29.644
it's probably better just to show it directly in the visualization.

00:00:29.644 --> 00:00:32.539
One way of doing this is to use Matplotlib to change

00:00:32.539 --> 00:00:36.575
the tick marks from leveling absolute counts, to relative counts.

00:00:36.575 --> 00:00:39.890
Let's start by creating a list of tick positions.

00:00:39.890 --> 00:00:44.155
We start by computing the length of the longest bar in terms of proportion.

00:00:44.155 --> 00:00:47.425
The original Pokemon data frame gives us the denominator,

00:00:47.424 --> 00:00:50.250
and we use value counts to get the numerator.

00:00:50.250 --> 00:00:53.219
Now, we use NumPy's a range function,

00:00:53.219 --> 00:00:55.839
to produce a set of evenly spaced proportioned values

00:00:55.840 --> 00:00:58.615
between zero and the max in steps of 2%,

00:00:58.615 --> 00:01:02.240
and store the values in the tick props variable.

00:01:02.240 --> 00:01:05.070
I'm also using a list comprehension to create

00:01:05.069 --> 00:01:09.064
an additional variable tick names to apply to the tick labels.

00:01:09.064 --> 00:01:13.424
These strings will show the proportions with a consistent two decimal places.

00:01:13.424 --> 00:01:15.905
Now we're ready to modify our plot.

00:01:15.905 --> 00:01:18.170
To change the tick locations and labels,

00:01:18.170 --> 00:01:20.875
we use Matplotlib's X tick's function.

00:01:20.875 --> 00:01:23.555
The first argument sets the tick positions.

00:01:23.555 --> 00:01:25.900
Since the counts are still an absolute value,

00:01:25.900 --> 00:01:30.734
we need to multiply tick props by the number of Pokemon to get their position correct.

00:01:30.734 --> 00:01:33.129
The second argument sets the tick labels.

00:01:33.129 --> 00:01:35.099
We need to use both arguments here,

00:01:35.099 --> 00:01:37.989
since the positions and their values, are different.

00:01:37.989 --> 00:01:43.409
Finally, we use the X label function to change the x-axis label from the default count,

00:01:43.409 --> 00:01:45.795
to a more appropriate proportion.

00:01:45.795 --> 00:01:49.960
The resulting plot shows us that about 16% of all Pokemon include

00:01:49.959 --> 00:01:54.799
the water type all the way down to only 4% that include the ice type.

00:01:54.799 --> 00:01:58.625
Alternatively, maybe we want to have the axes in terms of counts,

00:01:58.625 --> 00:02:01.045
and use text on the bars to show proportion.

00:02:01.045 --> 00:02:04.504
This is where the flexibility of Matplotlib can shine.

00:02:04.504 --> 00:02:08.424
We use a loop to place text elements one by one.

00:02:08.425 --> 00:02:11.740
The first argument to the text function is the X position,

00:02:11.740 --> 00:02:13.675
just after the end of the bar.

00:02:13.675 --> 00:02:16.035
The second argument is the Y position,

00:02:16.034 --> 00:02:18.819
which starts at zero and increments with the loop.

00:02:18.819 --> 00:02:22.905
The third argument is the string to be printed, the percentage.

00:02:22.905 --> 00:02:26.125
Finally, I'm going to add an optional parameter VA

00:02:26.125 --> 00:02:30.574
to center the vertical alignment of text on each bar.

00:02:30.574 --> 00:02:33.530
The final plot looks like this.

