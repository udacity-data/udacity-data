WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.970
Now, let's take a look at some numeric variables in this data set.

00:00:03.970 --> 00:00:07.255
Let's start this example by looking at Pokemon speed.

00:00:07.254 --> 00:00:10.375
The higher the value, the sooner they will act in battle.

00:00:10.375 --> 00:00:15.169
Matplotlib has a built in function for creating histograms, the Hist Function.

00:00:15.169 --> 00:00:18.655
We can create the basic histogram in the same way as the bar chart.

00:00:18.655 --> 00:00:22.920
Data set to the Pokemon data frame and X to the speed variable.

00:00:22.920 --> 00:00:27.340
The distribution of speed values appears uni-modal and slightly right skewed,

00:00:27.339 --> 00:00:29.625
but there isn't a lot of detail here.

00:00:29.625 --> 00:00:33.195
By default, matplotlib will split the data into 10 bins,

00:00:33.195 --> 00:00:35.020
which is usually too few.

00:00:35.020 --> 00:00:38.390
In addition, the bin boundaries are not particularly aligned

00:00:38.390 --> 00:00:41.850
with the tick marks making interpretation trickier.

00:00:41.850 --> 00:00:45.804
To solve this, we want to use the bin's parameter of the Hist Function.

00:00:45.804 --> 00:00:48.134
If we set an integer value for the bins,

00:00:48.134 --> 00:00:52.280
such as 20, then that will set the number of bins that will be used for plotting.

00:00:52.280 --> 00:00:54.675
We have a more detailed look at the data,

00:00:54.674 --> 00:00:57.820
but this still has the problem of awkward bin boundaries.

00:00:57.820 --> 00:01:02.560
You can see the bin edges and counts return by hist when I remove the semicolon.

00:01:02.560 --> 00:01:07.370
The fact that bin edges are non integer and the data values are integer,

00:01:07.370 --> 00:01:11.260
will mean that some bins cover more integer values than others.

00:01:11.260 --> 00:01:13.940
Instead, a better way of making use of the bins

00:01:13.939 --> 00:01:17.534
parameter is to specify the bin boundaries explicitly.

00:01:17.534 --> 00:01:22.920
Here, I'll make use of Numpy's arange function to create bins of size five.

00:01:22.920 --> 00:01:25.564
The first argument is the minimum value,

00:01:25.564 --> 00:01:27.069
while the second argument,

00:01:27.069 --> 00:01:29.009
will be the maximum value.

00:01:29.010 --> 00:01:32.620
The third argument gives the step-size for the bins.

00:01:32.620 --> 00:01:36.755
One thing that I will do here is to add plus five to the second argument.

00:01:36.754 --> 00:01:41.734
This is because the values generated by arange will not include the maximum value.

00:01:41.734 --> 00:01:45.269
Only those things strictly lower than the max.

00:01:45.269 --> 00:01:46.709
By adding plus five,

00:01:46.709 --> 00:01:50.074
this means that all values should be represented in the chart.

00:01:50.075 --> 00:01:53.170
When I add the bins list to the Hist Function,

00:01:53.170 --> 00:01:57.155
this creates a view of the data that implies the data is approximately uni-modal,

00:01:57.155 --> 00:02:00.909
save for a bit of a dip in the 75-85 range.

00:02:00.909 --> 00:02:05.045
What happens if we try an extremely small bin size? Like one?

00:02:05.045 --> 00:02:08.900
On the one hand, this bin size is perhaps a bit too small,

00:02:08.900 --> 00:02:11.349
introducing a lot of noise in the plot.

00:02:11.349 --> 00:02:14.689
On the other hand, this does a good job of showing that

00:02:14.689 --> 00:02:18.305
Pokemon's speed statistics are usually divisible by five.

00:02:18.305 --> 00:02:22.740
Seaborn also has a function for creating histograms, Distplot.

00:02:22.740 --> 00:02:26.004
Unlike the countplot and Hist function seen before,

00:02:26.004 --> 00:02:31.009
the main argument taken by the function is just the panda series containing all the data.

00:02:31.009 --> 00:02:33.954
You'll notice two things about this plot.

00:02:33.955 --> 00:02:38.070
First of all, the default bin count is larger than in matplotlib.

00:02:38.069 --> 00:02:40.650
Secondly, you'll notice that a line has been plotted over

00:02:40.650 --> 00:02:44.439
the bars and that the Y axis values are very small.

00:02:44.439 --> 00:02:49.159
This is because the line is a density curve estimate of the data distribution,

00:02:49.159 --> 00:02:53.275
and the total area underneath the curve is set to be =1.

00:02:53.275 --> 00:02:55.515
If you're interested in this kind of plot,

00:02:55.514 --> 00:02:59.369
you can read up more about this in the extras at the end of this lesson.

00:02:59.370 --> 00:03:04.585
You can turn off the density curve by setting the parameter kde=false.

00:03:04.585 --> 00:03:06.849
With this parameter, you can see that

00:03:06.849 --> 00:03:10.680
the histogram is plotted alone with counts on the Y axis.

00:03:10.680 --> 00:03:13.375
However, since we're back to the basic histogram,

00:03:13.375 --> 00:03:17.400
we might as well just use Matplotlib's Hist Function from the start.

