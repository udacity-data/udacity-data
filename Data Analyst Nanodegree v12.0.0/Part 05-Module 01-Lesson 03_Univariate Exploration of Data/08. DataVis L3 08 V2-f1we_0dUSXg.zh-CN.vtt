WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.970
现在 让我们来看一下这个数据集里的数值变量

00:00:03.970 --> 00:00:07.255
比如宝可梦的速度

00:00:07.254 --> 00:00:10.375
速度值越高 宝可梦出招越快

00:00:10.375 --> 00:00:15.169
Matplotlib 有一个内置函数可创建直方图 即 hist 函数

00:00:15.169 --> 00:00:18.655
创建基础直方图的操作与创建条形图相同

00:00:18.655 --> 00:00:22.920
将参数 data 设为 pokemon 数据集 参数 x 设为 speed 变量     

00:00:22.920 --> 00:00:27.340
速度值看起来是单峰分布 而且稍向右偏     

00:00:27.339 --> 00:00:29.625
但可以研究的细节并不多

00:00:29.625 --> 00:00:33.195
这是因为 matplotlib 默认把数据分为十组

00:00:33.195 --> 00:00:35.020
而这个组数通常都太少

00:00:35.020 --> 00:00:38.390
另外 数据的组边界和坐标轴刻度也没怎么对齐

00:00:38.390 --> 00:00:41.850
这不利于解读数据

00:00:41.850 --> 00:00:45.804
我们可以用函数 hist 里的参数 bins 来解决这个问题

00:00:45.804 --> 00:00:48.134
如果给 bins 设一个整数值

00:00:48.134 --> 00:00:52.280
比如 20 那绘制出来的图表就包含 20 个 分组 (bin)     

00:00:52.280 --> 00:00:54.675
现在数据细节清晰多了

00:00:54.674 --> 00:00:57.820
但组边界还是模糊不清

00:00:57.820 --> 00:01:02.560
如果我去掉分号 你就可以看到函数 hist 返回的组边界和分组数量了

00:01:02.560 --> 00:01:07.370
组边界非整数 而数据的值为整数

00:01:07.370 --> 00:01:11.260
导致有些组包含了比较多的整数值

00:01:11.260 --> 00:01:13.940
因此 我们应该用参数 bins

00:01:13.939 --> 00:01:17.534
来指定组边界

00:01:17.534 --> 00:01:22.920
这里我用 Numpy 的函数 arange 创建了组距为 5 的分组

00:01:22.920 --> 00:01:25.564
第一个参数为最小值

00:01:25.564 --> 00:01:27.069
第二个参数

00:01:27.069 --> 00:01:29.009
为最大值

00:01:29.010 --> 00:01:32.620
第三个参数是组距     

00:01:32.620 --> 00:01:36.755
这里我给第二个参数加了 5

00:01:36.754 --> 00:01:41.734
这是因为 arange 生成的值不包括最大值

00:01:41.734 --> 00:01:45.269
一定会是低于最大值的值

00:01:45.269 --> 00:01:46.709
加了 5

00:01:46.709 --> 00:01:50.074
所有值就都能呈现在直方图中了

00:01:50.075 --> 00:01:53.170
将列表 bins 传入到函数 hist 里

00:01:53.170 --> 00:01:57.155
就会生成一个图表 可以观察到数据大致上符合单峰分布

00:01:57.155 --> 00:02:00.909
除了 75-85 区间那里有些凹陷     

00:02:00.909 --> 00:02:05.045
如果我们把组距设得极小 会怎么样呢？比如 1

00:02:05.045 --> 00:02:08.900
一方面 这个组距或许太小了

00:02:08.900 --> 00:02:11.349
图表中多了很多噪声

00:02:11.349 --> 00:02:14.689
另一方面 这又很好地体现了一点

00:02:14.689 --> 00:02:18.305
宝可梦的速度统计数据通常可以被 5 整除

00:02:18.305 --> 00:02:22.740
Seaborn 也有一个函数可以创建直方图 即 distplot

00:02:22.740 --> 00:02:26.004
与之前的函数 countplot 和 hist 不同

00:02:26.004 --> 00:02:31.009
函数 distplot 的主要参数只是包含所有数据的 pandas Series     

00:02:31.009 --> 00:02:33.954
不难发现这个图表有两个特点

00:02:33.955 --> 00:02:38.070
第一 默认组数比 matplotlib 的多

00:02:38.069 --> 00:02:40.650
第二 你会发现条形上有一条线

00:02:40.650 --> 00:02:44.439
而且 y 轴的值很小

00:02:44.439 --> 00:02:49.159
这是因为这条线代表的是概率分布的估计曲线

00:02:49.159 --> 00:02:53.275
曲线下方的总面积为 1

00:02:53.275 --> 00:02:55.515
如果你对这类图表感兴趣

00:02:55.514 --> 00:02:59.369
可以在课程结尾部分 查看补充内容     

00:02:59.370 --> 00:03:04.585
要关闭密度曲线 只需将参数 kde 设为 False 即可

00:03:04.585 --> 00:03:06.849
用了这个参数

00:03:06.849 --> 00:03:10.680
直方图就只有 y 轴的数量统计 没有密度曲线了

00:03:10.680 --> 00:03:13.375
不过既然我们又回到了基础直方图

00:03:13.375 --> 00:03:17.400
那还是用 Matplotlib 的 hist 函数来绘制吧

