WEBVTT
Kind: captions
Language: zh-CN

00:00:01.480 --> 00:00:07.910
我们已经了解了单个形式的数据 例如字符串或数字 这些数据很实用

00:00:07.910 --> 00:00:11.509
但是 Python 能够真正编写强大程序的精彩之处是

00:00:11.509 --> 00:00:15.529
使用数据容器

00:00:15.529 --> 00:00:19.835
容器会包含其他数据类型 甚至其他容器

00:00:19.835 --> 00:00:23.865
我们来看看第一种 Python 容器“列表”

00:00:23.864 --> 00:00:30.589
列表是 Python 中的一种数据结构 它是可改变的有序元素序列

00:00:30.589 --> 00:00:33.984
稍后会详细讲解什么是可改变的有序序列

00:00:33.984 --> 00:00:37.189
这段代码定义了变量 months 

00:00:37.189 --> 00:00:40.244
其中包含一列字符串

00:00:40.244 --> 00:00:43.969
列表中的每个元素是一年的某个月份

00:00:43.969 --> 00:00:47.009
列表使用方括号来定义

00:00:47.009 --> 00:00:51.179
始终存储的是用英文逗号分隔的其他数据

00:00:51.179 --> 00:00:55.787
这些数据可以是你已经见过的任何其他数据类型的混合形式

00:00:55.787 --> 00:01:00.344
列表具有顺序 更准确地说 是有序形式

00:01:00.344 --> 00:01:04.590
我们可以通过索引查找列表中的单个元素

00:01:04.590 --> 00:01:08.030
可以像这样查找列表中的值

00:01:08.030 --> 00:01:10.320
输入列表名称 然后是方括号

00:01:10.319 --> 00:01:16.199
里面的整数表示该元素的位置或索引

00:01:16.200 --> 00:01:19.305
注意 列表中的第一个元素“January”

00:01:19.305 --> 00:01:21.525
位于索引 0 处

00:01:21.525 --> 00:01:23.780
而不是索引 1 处

00:01:23.780 --> 00:01:28.920
很多编程语言都遵守这种规则 叫做从零开始的索引

00:01:28.920 --> 00:01:31.894
如果你觉得从零开始的索引不好懂

00:01:31.894 --> 00:01:33.629
可以这么思考

00:01:33.629 --> 00:01:39.214
元素的索引表示该元素离列表开头的距离多远

00:01:39.215 --> 00:01:42.945
第一个元素离开头 0 个元素的距离

00:01:42.944 --> 00:01:46.889
第二个元素离开头 1 个元素的距离 以此类推

00:01:46.890 --> 00:01:51.189
我们也可以从列表的末尾（而不是开头）计算索引

00:01:51.189 --> 00:01:53.039
到目前为止 都是使用从开头开始的索引

00:01:53.040 --> 00:01:55.920
要从末尾开始 我们需要使用负数形式的索引

00:01:55.920 --> 00:01:59.674
例如 我们可以获得一年的最后一个月份

00:01:59.674 --> 00:02:03.612
索引 -1 表示该列表的最后一个元素

00:02:03.612 --> 00:02:08.280
-2 表示倒数第二个元素 以此类推

00:02:08.280 --> 00:02:11.640
注意 虽然 0 表示列表的第一个索引

00:02:11.639 --> 00:02:13.649
但是 -0 并不表示最后一个元素

00:02:13.650 --> 00:02:15.480
这有点让人困惑

00:02:15.479 --> 00:02:20.924
如果你尝试访问列表中不存在的索引

00:02:20.925 --> 00:02:23.835
系统会显示列表索引异常

00:02:23.835 --> 00:02:26.849
Python 通过这种方式告诉你

00:02:26.849 --> 00:02:30.034
你尝试访问的索引不在该列表中

00:02:30.034 --> 00:02:33.495
因为索引 25 不存在

00:02:33.495 --> 00:02:35.515
我们遇到了该错误

00:02:35.514 --> 00:02:41.579
遇到索引错误很常见 尤其是如果你不熟悉 Python 中的索引规则的话

00:02:41.580 --> 00:02:44.790
一开始 你可能经常会遇到这些错误

00:02:44.789 --> 00:02:50.365
遇到索引错误的最常见原因是使用从 1 开始的索引

00:02:50.366 --> 00:02:54.390
但是也可能有其他原因

00:02:54.389 --> 00:02:59.939
始终建议你使用 print 函数和一个小的示例进行调试

00:02:59.939 --> 00:03:04.000
这样可以判断索引是否有偏离 偏离多少

