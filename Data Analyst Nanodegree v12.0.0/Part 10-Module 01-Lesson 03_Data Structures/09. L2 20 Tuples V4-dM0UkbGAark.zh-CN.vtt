WEBVTT
Kind: captions
Language: zh-CN

00:00:01.790 --> 00:00:07.084
Python 提供了一种很有用的数据容器 叫元组

00:00:07.084 --> 00:00:11.359
元组常用来存储相关的信息片段

00:00:11.359 --> 00:00:17.954
元组是 Python 的一种数据结构 它是不可变的有序元素序列 

00:00:17.954 --> 00:00:22.389
让我们来用纬度和经度来理解这个例子

00:00:22.390 --> 00:00:25.710
元组与列表类似 

00:00:25.710 --> 00:00:30.219
因为它们都存储一个有序的对象集合 且这些对象可以通过索引进行访问 

00:00:30.219 --> 00:00:34.405
比如说 位置0和位置1 

00:00:34.405 --> 00:00:38.454
但是 与列表不同 元组是不可变的 

00:00:38.454 --> 00:00:43.530
我们不能在元组中添加或者删除项 也不能对它们在元组内进行排序 
10
如果元组是功能较少的列表 为什么我们需要元组呢？

00:00:47.905 --> 00:00:52.310
当有两个或者多个紧密关联的值的时候 元组就会非常有用

00:00:52.310 --> 00:00:58.070
这些值总是同时出现或使用 比如说纬度和经度的坐标 

00:00:58.070 --> 00:01:03.649
元组使得我们能够以比较紧凑的方式来分配多个变量 

00:01:03.649 --> 00:01:06.984
注意 分配给元组维度的值

00:01:06.984 --> 00:01:10.885
没有像前面的例子那样用括号括起来 

00:01:10.885 --> 00:01:14.510
在创建元组的时候 括号并不是必须的

00:01:14.510 --> 00:01:19.075
在没有必要用括号来使得代码更清楚的时候 程序员常常会省略它们 

00:01:19.075 --> 00:01:20.719
在第二行 

00:01:20.719 --> 00:01:24.644
从元组维度的内容中分配三个变量 

00:01:24.644 --> 00:01:27.363
这就叫做元组解包 

00:01:27.364 --> 00:01:31.700
你可以使用元组解包将一个元组中的信息分配给多个变量 

00:01:31.700 --> 00:01:36.439
而无需逐个访问它们 

00:01:36.439 --> 00:01:38.875
并创建多个赋值语句 

00:01:38.875 --> 00:01:43.629
在这个例子中 如果我们不需要直接使用维度 

00:01:43.629 --> 00:01:46.250
我们可以把这两行代码简化为一行

00:01:46.250 --> 00:01:50.420
把三个变量赋值到一个中 

