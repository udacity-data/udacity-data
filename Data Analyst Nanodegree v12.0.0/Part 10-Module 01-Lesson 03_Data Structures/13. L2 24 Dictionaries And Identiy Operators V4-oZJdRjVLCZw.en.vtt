WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.750
Sets are simple data structures,

00:00:06.750 --> 00:00:10.275
and they have one main use, collecting unique elements.

00:00:10.275 --> 00:00:11.980
Our next data structures,

00:00:11.980 --> 00:00:14.429
dictionaries, are more flexible.

00:00:14.429 --> 00:00:18.644
Rather than storing single objects like lists and sets do,

00:00:18.644 --> 00:00:23.239
dictionaries store pairs of elements, keys and values.

00:00:23.239 --> 00:00:27.109
In this example, we define a dictionary where the keys are

00:00:27.109 --> 00:00:31.464
element names and their values are there corresponding atomic numbers.

00:00:31.464 --> 00:00:36.859
We can look up values in the dictionary by using square brackets enclosing a key.

00:00:36.859 --> 00:00:41.500
We can also insert new values into the dictionary with square brackets.

00:00:41.500 --> 00:00:45.804
Here, we're adding lithium and giving it a value of three.

00:00:45.804 --> 00:00:49.034
Dictionary keys are similar to list indices.

00:00:49.034 --> 00:00:54.259
We can select elements from the data structure by putting the key in square brackets.

00:00:54.259 --> 00:01:00.309
Unlike lists, dictionaries can have keys of any immutable type, not just integers.

00:01:00.310 --> 00:01:03.965
The element dictionary uses strings for it's keys.

00:01:03.965 --> 00:01:08.790
However, it's not even necessary for every key to have the same type.

00:01:08.790 --> 00:01:12.470
We can check whether a value is in a dictionary,

00:01:12.469 --> 00:01:17.364
the same way we check whether a value is in a list or set with the in keyword.

00:01:17.364 --> 00:01:22.894
We can use in to verify whether a key is in the dictionary before looking it up.

00:01:22.894 --> 00:01:26.254
If there's a possibility that the key is not there.

00:01:26.254 --> 00:01:29.259
Mithril was not part of our elements dictionary,

00:01:29.260 --> 00:01:31.105
so false is printed.

00:01:31.105 --> 00:01:35.150
Dictionaries have a related method that's also useful.

00:01:35.150 --> 00:01:38.480
Get, get looks up values in a dictionary,

00:01:38.480 --> 00:01:40.094
but unlike square brackets,

00:01:40.094 --> 00:01:43.859
get returns none or a default value of your choice,

00:01:43.859 --> 00:01:45.855
if the key is not found.

00:01:45.855 --> 00:01:48.225
The lithium is not in our dictionary,

00:01:48.224 --> 00:01:50.854
so none is returned and then printed.

00:01:50.855 --> 00:01:53.755
If you expect look-ups to sometimes fail,

00:01:53.754 --> 00:01:55.579
get might be a better tool than

00:01:55.579 --> 00:02:00.579
normal square bracket look-ups because errors can crash your program which isn't good.

00:02:00.579 --> 00:02:04.775
You can check if a key return none with the is operator,

00:02:04.775 --> 00:02:08.585
or you can check for the opposite using is not.

00:02:08.585 --> 00:02:11.420
These are called identity operators.

00:02:11.419 --> 00:02:16.009
You will learn more about identity operators and how they differ from using

00:02:16.009 --> 00:02:21.719
these equals two or not equals to comparison operators in the quizzes that follow.

