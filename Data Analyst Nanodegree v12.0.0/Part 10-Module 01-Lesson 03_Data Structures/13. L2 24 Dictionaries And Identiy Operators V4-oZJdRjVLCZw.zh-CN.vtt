WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:06.750
集合是非常简单的数据结构 

00:00:06.750 --> 00:00:10.275
它的一个主要用途 是收集唯一的独特的元素 

00:00:10.275 --> 00:00:11.980
我们要学习的下一个数据结构 

00:00:11.980 --> 00:00:14.429
字典 要更加灵活

00:00:14.429 --> 00:00:18.644
它不像列表和集合一样存储单个对象 

00:00:18.644 --> 00:00:23.239
字典存储元素对 包括键和值 

00:00:23.239 --> 00:00:27.109
在这个例子中 我们定义了一个字典 

00:00:27.109 --> 00:00:31.464
其中键是元素名称 它们的值是相应的原子序数 

00:00:31.464 --> 00:00:36.859
我们可以使用括起键的方括号在字典中查找值 

00:00:36.859 --> 00:00:41.500
我们还可以使用方括号在字典中插入新值 

00:00:41.500 --> 00:00:45.804
在这里 我们正在添加锂 lithium 并赋予它三个值 

00:00:45.804 --> 00:00:49.034
字典键与列表索引类似 

00:00:49.034 --> 00:00:54.259
我们可以通过将键放在方括号中来从数据结构中选择元素 

00:00:54.259 --> 00:01:00.309
与列表不同 字典可以包含任何不可变类型的键 而不仅仅是整数 

00:01:00.310 --> 00:01:03.965
元素字典使用字符串作为其键 

00:01:03.965 --> 00:01:08.790
但是 每个键都必须具有相同的类型 

00:01:08.790 --> 00:01:12.470
我们可以检查一个值是否在字典中 

00:01:12.469 --> 00:01:17.364
与列表相同 我们通过 in 这个关键字来判断键是否在集合中 

00:01:17.364 --> 00:01:22.894
在查找之前 我们可以使用 in 来检验该键是否在字典中 

00:01:22.894 --> 00:01:26.254
如果想要查找的键可能不在字典中的话 

00:01:26.254 --> 00:01:29.259
秘银（Mithril）不是我们元素字典的一部分 

00:01:29.260 --> 00:01:31.105
所以打印结果是 False

00:01:31.105 --> 00:01:35.150
字典有一个方法也很有用 

00:01:35.150 --> 00:01:38.480
Get 在字典中查找值 

00:01:38.480 --> 00:01:40.094
但不像方括号 

00:01:40.094 --> 00:01:43.859
Get 返回 None 或者你选择的默认值

00:01:43.859 --> 00:01:45.855
如果键没有找到 

00:01:45.855 --> 00:01:48.225
锂（lithium）不在我们的字典里 

00:01:48.224 --> 00:01:50.854
所以 None 被返回并打印

00:01:50.855 --> 00:01:53.755
如果你希望查找在某些情况下失败 

00:01:53.754 --> 00:01:55.579
Get 可能是一个更好的工具 

00:01:55.579 --> 00:02:00.579
常用的方括号查找会因为错误会导致程序崩溃 这不是我们所期望看到的 

00:02:00.579 --> 00:02:04.775
您可以使用is运算符检查键是否返回none 

00:02:04.775 --> 00:02:08.585
或者你也可以使用 is not 来达到相反的目的 

00:02:08.585 --> 00:02:11.420
这些被称为恒等式运算符

00:02:11.419 --> 00:02:16.009
您将了解有关恒等式运算符的更多信息 

00:02:16.009 --> 00:02:21.719
以及它们与后续测验中的这些等于或不等于比较运算符的区别 

