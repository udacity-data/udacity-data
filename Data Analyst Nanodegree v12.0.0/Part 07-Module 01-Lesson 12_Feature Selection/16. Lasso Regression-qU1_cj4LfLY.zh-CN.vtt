WEBVTT
Kind: captions
Language: zh-CN

00:00:00.210 --> 00:00:04.770
这是 lasso 回归通过使用的特征数量

00:00:04.770 --> 00:00:07.620
把回归变得更简易的方法

00:00:07.620 --> 00:00:12.110
针对对回归结果帮助不大的特征

00:00:12.110 --> 00:00:15.820
它将这些特征的系数设置为一个非常小的值

00:00:15.820 --> 00:00:17.360
如果可能的话 设置为 0

00:00:17.360 --> 00:00:20.740
想象一下我有四个可用的特征

00:00:20.740 --> 00:00:24.520
x1 到 x4 我不知道哪个是最强大的

00:00:24.520 --> 00:00:26.650
我实际上要使用的特征是哪些？

00:00:26.650 --> 00:00:29.120
如果不必要的话 我不想使用所有这些特征

00:00:29.120 --> 00:00:33.380
m1 到 m4 是我执行拟合时

00:00:33.380 --> 00:00:36.918
这些特征对应的回归系数

00:00:36.918 --> 00:00:40.050
在一个普通的多变量回归中

00:00:40.050 --> 00:00:42.310
我会得到一个类似于这个的结果

00:00:42.310 --> 00:00:45.280
它使用可用的所有特征

00:00:45.280 --> 00:00:48.184
并为每个特征分配一个回归系数

00:00:48.184 --> 00:00:52.100
lasso 回归要做的是 试着将这些特征一次性添加上

00:00:52.100 --> 00:00:54.720
如果这个新特征改善拟合的程度

00:00:54.720 --> 00:00:58.910
无法超出包含此特征的惩罚 就不添加此特征

00:00:58.910 --> 00:01:01.870
不添加指的是将系数设置为零

00:01:01.870 --> 00:01:04.060
因此我们假设 x1 和 x2

00:01:04.060 --> 00:01:07.560
是包含在我们回归中的两个重要的特征

00:01:07.560 --> 00:01:11.660
他们能强有力地描述模式

00:01:11.660 --> 00:01:14.880
但 x3 和 x4 不能大幅度地改善拟合

00:01:14.880 --> 00:01:18.610
能改善一点 但也可能只是对杂乱点的拟合更好

00:01:18.610 --> 00:01:21.133
接下来 把两个特征的系数

00:01:21.133 --> 00:01:23.124
设置为0

00:01:23.124 --> 00:01:27.750
因此 m3 会被设置为0 m4 会被设置为0

00:01:27.750 --> 00:01:30.850
这有效地表明这两个特征与拟合再也无关了

00:01:30.850 --> 00:01:33.780
唯一剩下的是 x1 和 x2

00:01:33.780 --> 00:01:37.360
我们一开始想要的两个特征

00:01:37.360 --> 00:01:40.730
正则化 是对额外特征添加惩罚项

00:01:40.730 --> 00:01:44.440
它能够自动帮你选择

