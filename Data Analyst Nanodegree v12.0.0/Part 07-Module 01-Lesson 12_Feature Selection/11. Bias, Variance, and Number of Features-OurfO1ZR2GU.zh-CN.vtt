WEBVTT
Kind: captions
Language: zh-CN

00:00:00.130 --> 00:00:03.030
我们来更深入一点观察你在算法中使用的特征个数

00:00:03.030 --> 00:00:06.480
与偏差-方差困境有何关系

00:00:06.480 --> 00:00:10.190
记的我们曾经说过 高偏差算法就是

00:00:10.190 --> 00:00:14.310
对训练数据关心很少 是一种过度简化

00:00:14.310 --> 00:00:16.050
它只是一次又一次地重复做同样的事情

00:00:16.050 --> 00:00:20.380
而不管数据可能尝试告诉它要做什么

00:00:20.380 --> 00:00:23.420
另一方面 一个太高方差的算法

00:00:23.420 --> 00:00:25.310
会对数据过度关心

00:00:25.310 --> 00:00:29.690
它不会很好地推广至以前未曾见过的新情况

00:00:29.690 --> 00:00:32.270
基本上只是记住训练示例而已

00:00:32.270 --> 00:00:35.310
一旦获得新的示例或者新的数据点 和原有的训练示例不完全一致的时候

00:00:35.310 --> 00:00:39.280
就不知道该如何去做了

00:00:39.280 --> 00:00:42.330
另一种考虑的角度是 它会过度拟合数据

00:00:42.330 --> 00:00:46.010
还要说的一件事情就是 高偏差算法倾向于

00:00:46.010 --> 00:00:48.290
在训练集上有很高的误差

00:00:48.290 --> 00:00:51.116
所以例如在进行回归时 

00:00:51.116 --> 00:00:55.580
可能意味着很低的 R 平方值或者较大的残差平方和

00:00:55.580 --> 00:01:00.620
另一方面 高方差可能对于训练集有很好很好的拟合度

00:01:00.620 --> 00:01:06.500
但对于测试数据却拟合不佳 因为它不能很好地推广

00:01:06.500 --> 00:01:09.170
所以一旦你给它新的输入

00:01:09.170 --> 00:01:10.740
立刻就会出现问题

00:01:10.740 --> 00:01:13.410
你通常期望在训练集上

00:01:13.410 --> 00:01:14.660
做的比在测试集上好一些

00:01:14.660 --> 00:01:18.650
但高方差意味着你在训练集上做的好太多

00:01:18.650 --> 00:01:21.201
高方差是当你对训练数据过度拟合后

00:01:21.201 --> 00:01:23.450
在测试集上的性能就很差

00:01:23.450 --> 00:01:24.830
现在来做一个测验问题

00:01:24.830 --> 00:01:29.530
假设你有一个算法只是用其中的一些特征

00:01:29.530 --> 00:01:32.520
比如说你可以使用很多的特征

00:01:32.520 --> 00:01:35.190
可能是数十个之中的一两种

00:01:35.190 --> 00:01:37.670
在不了解问题的其它方面或所使用特征的情况下

00:01:37.670 --> 00:01:41.530
你认为这会倾向于导致

00:01:41.530 --> 00:01:46.270
高偏差的情况 还是高方差的情况？

00:01:46.270 --> 00:01:47.590
请点击你认为正确的答案

