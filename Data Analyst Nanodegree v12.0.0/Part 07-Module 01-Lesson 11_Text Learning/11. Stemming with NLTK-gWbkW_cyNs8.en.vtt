WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:03.560
Since word stemming can be kind of an intricate process,

00:00:03.560 --> 00:00:06.680
this is something that's usually handles by special functions within

00:00:06.680 --> 00:00:09.140
natural language processing toolkits.

00:00:09.140 --> 00:00:13.950
Like NLTK, or other types of toolkits that are available in other languages.

00:00:13.950 --> 00:00:16.170
Let me give you a quick idea of what this looks like.

00:00:16.170 --> 00:00:17.920
So I fire up my Python interpreter and

00:00:17.920 --> 00:00:21.130
the first thing that I do is I import a stemmer.

00:00:21.130 --> 00:00:24.220
As it happens, there are several different stemmers that are available.

00:00:24.220 --> 00:00:26.940
I'm going to show you what the snowball stemmer does.

00:00:26.940 --> 00:00:30.320
But there are several others that you might see from time to time.

00:00:30.320 --> 00:00:32.950
So this happens to be the command for importing the snowball stemmer.

00:00:32.950 --> 00:00:34.210
So I'll go ahead and do that.

00:00:34.210 --> 00:00:36.220
I just found this, example on the Internet.

00:00:36.220 --> 00:00:38.420
And that usually takes a second or two.

00:00:38.420 --> 00:00:40.860
And then what I'm going to do is actually create the stemmer.

00:00:40.860 --> 00:00:44.550
And just like with the stop words, I have to declare a language that I

00:00:44.550 --> 00:00:47.580
want to stem in, because, of course, stemming a French word will be

00:00:47.580 --> 00:00:50.480
different from stemming an English word, we will do English.

00:00:50.480 --> 00:00:54.770
Okay, so now I have this stemmer and I can use it to stem any word that I like.

00:00:54.770 --> 00:00:58.450
So let's try one of the words from my responsive example.

00:00:58.450 --> 00:01:01.860
So I call the stem function on the stemmer that I just created, and

00:01:01.860 --> 00:01:03.630
let's use the word responsiveness.

00:01:03.630 --> 00:01:07.330
And it gives us that the stem of that is going to be respons.

00:01:07.330 --> 00:01:11.050
So something very similar to what we were guessing in the last video.

00:01:11.050 --> 00:01:12.490
Let's try another one that's similar.

00:01:12.490 --> 00:01:17.530
Same as before, respons, and now I've added a prefix to it, unresponsive.

00:01:17.530 --> 00:01:19.385
So it means the opposite of responsive, but

00:01:19.385 --> 00:01:23.400
we're still talking about the concept of whether something is responsive or not.

00:01:23.400 --> 00:01:26.280
So we should get the same stem still.

00:01:26.280 --> 00:01:30.420
We can also see that there are certain limitations to this particular stemmer.

00:01:30.420 --> 00:01:34.660
One is that it didn't strip about the un in unresponsive.

00:01:34.660 --> 00:01:36.030
And, maybe that's something that you want,

00:01:36.030 --> 00:01:39.380
maybe you want to be preserving the information that something that's

00:01:39.380 --> 00:01:43.770
responsive and something that is unresponsive are not exactly the same thing.

00:01:43.770 --> 00:01:47.440
Maybe all you care about is just the idea that something could be responsive.

00:01:47.440 --> 00:01:48.912
So, there can be a little bit of,

00:01:48.912 --> 00:01:52.520
of fine tuning here to figure out exactly how you want to run it.

00:01:52.520 --> 00:01:54.470
But in general, when you're applying a stemmer,

00:01:54.470 --> 00:01:57.700
it's going to clean up the vocabulary of your corpus a lot.

00:01:57.700 --> 00:02:00.960
It's going to take something that can be very, very complicated,

00:02:00.960 --> 00:02:04.250
you have your tens of thousands of dimensions that correspond to

00:02:04.250 --> 00:02:08.050
all the words in the language, and it makes something that's much more compact.

00:02:08.050 --> 00:02:08.720
You'll get a chance to

00:02:08.720 --> 00:02:11.200
play with this in the mini project at the end of the lesson.

