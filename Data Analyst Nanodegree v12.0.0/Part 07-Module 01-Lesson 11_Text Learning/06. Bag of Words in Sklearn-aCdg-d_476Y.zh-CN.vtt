WEBVTT
Kind: captions
Language: zh-CN

00:00:00.790 --> 00:00:04.160
现在你已经熟悉了词袋这个概念

00:00:04.160 --> 00:00:08.182
请把手放在键盘上 在 sklearn 中使用它吧

00:00:08.182 --> 00:00:12.400
在 sklearn 中 词袋被称为 CountVectorizer

00:00:12.400 --> 00:00:16.520
字面意义上看 就是指计算不同单词在语料库中出现的次数

00:00:16.520 --> 00:00:19.450
我现在要带你看看解释器中的一些例子

00:00:19.450 --> 00:00:20.350
在接下来几个视频中

00:00:20.350 --> 00:00:23.930
你会通过编程测试获得实际操作经验

00:00:23.930 --> 00:00:27.430
我来到解释器 使用在线文档作为参考

00:00:27.430 --> 00:00:30.325
然后导入 CountVectorizer

00:00:30.325 --> 00:00:36.430
CountVectorizer 在 sklearn 的 feature_extraction.text 部分

00:00:37.470 --> 00:00:38.860
第一次出错了

00:00:38.860 --> 00:00:42.670
但是我能像导入 sklearn 的其他对象一样导入它

00:00:42.670 --> 00:00:44.010
然后我创建自己的 vectorizer

00:00:44.010 --> 00:00:48.880
然后我希望添加一些字符串格式的文件

00:00:48.880 --> 00:00:50.710
我喜欢 Sebastian 的例子

00:00:50.710 --> 00:00:53.980
但我要用一些看上去更像我会在收件箱中看到的

00:00:53.980 --> 00:00:56.810
邮件的内容

00:00:56.810 --> 00:00:58.570
所以我们来编一些字符串吧

00:00:58.570 --> 00:01:01.940
这些不是真邮件 但有点像

00:01:01.940 --> 00:01:04.900
要把这些放入 CountVectorizer

00:01:04.900 --> 00:01:06.610
我首先要做的是把他们放入清单

00:01:06.610 --> 00:01:08.790
我现在要创建一个词袋

00:01:08.790 --> 00:01:13.410
我在把邮件清单放入 CountVectorizer 时可以得到词袋

00:01:13.410 --> 00:01:15.230
我这么做了 但是有点小错误

00:01:15.230 --> 00:01:17.510
我忘记了两个步骤

00:01:17.510 --> 00:01:20.920
首先是我要使用 Vectorizer 拟合我的数据

00:01:20.920 --> 00:01:23.310
下一个是我需要转换数据

00:01:23.310 --> 00:01:24.480
所以首先 我完成了拟合

00:01:24.480 --> 00:01:27.930
这里指出了语料库中的所有单词

00:01:27.930 --> 00:01:30.330
所有邮件中的所有单词

00:01:30.330 --> 00:01:33.820
然后对每个单词分配数字或清单指数

00:01:33.820 --> 00:01:36.730
然后进行转换 挑出语料库内所有的单词

00:01:36.730 --> 00:01:41.420
然后算出每个单词出现的次数

00:01:41.420 --> 00:01:43.631
我的语法不是很完美 但应该还行

00:01:46.314 --> 00:01:49.190
为了方便理解 我打印了我的词袋

00:01:49.190 --> 00:01:50.680
看看它是什么样子的

00:01:50.680 --> 00:01:54.740
我得到了很多元组和整数

00:01:54.740 --> 00:01:58.880
虽然看着好像比较难理解 但我们可以通过一个相当直接的方法来理解它

00:01:58.880 --> 00:02:01.110
比如说 这一行

00:02:01.110 --> 00:02:04.770
解读方式为 1 号文件

00:02:04.770 --> 00:02:06.780
第 7 个词出现了一次

00:02:06.780 --> 00:02:08.490
当然

00:02:08.490 --> 00:02:12.090
我们必须要了解第 7 个词是什么 才能真正地理解

00:02:13.270 --> 00:02:14.800
但是所有的信息都在这里

00:02:15.850 --> 00:02:21.270
相似地 我看到第 1 号文件第 6 个词出现过三次

00:02:21.270 --> 00:02:24.060
出于好奇 我们去第 1 号文件

00:02:24.060 --> 00:02:26.990
找出第六个单词是什么

00:02:26.990 --> 00:02:31.290
1 号文件应该是第二字符串

00:02:31.290 --> 00:02:33.640
因为索引从零开始算

00:02:33.640 --> 00:02:37.520
我可以看到的确有个单词重复了三遍

00:02:37.520 --> 00:02:39.450
“很好”这个单词

00:02:39.450 --> 00:02:41.720
然后了解了第 7 个单词是什么之后

00:02:41.720 --> 00:02:42.820
现在就能看懂了

00:02:43.940 --> 00:02:46.190
在查看 sklearn 文件时

00:02:46.190 --> 00:02:49.750
我看到词袋的一个属性 叫做词汇表

00:02:49.750 --> 00:02:52.630
我可以在这里验证我的假设

00:02:52.630 --> 00:02:55.860
我对自己的词汇表调用函数 get

00:02:55.860 --> 00:02:58.230
然后传递给参数 这里是这个词

00:02:58.230 --> 00:03:01.880
根据这一行给到的提示 第 1 号文件第 6 个数字

00:03:01.880 --> 00:03:06.140
出现了三次 所以我对结果有这样的设想

00:03:06.140 --> 00:03:06.970
然后这就是结果

00:03:06.970 --> 00:03:10.120
所以通过这种方式 对任何语料库中的任何单词

00:03:10.120 --> 00:03:14.720
我都可以找到它在我的词袋中的特征数

00:03:14.720 --> 00:03:17.270
你也可以从另外一个角度来应用

00:03:17.270 --> 00:03:20.150
比如说 你想要知道什么单词

00:03:20.150 --> 00:03:24.030
特征数是六 你也可以摘取出这个信息

00:03:24.030 --> 00:03:27.120
我们在下一课讲述特征选择时

00:03:27.120 --> 00:03:28.650
用很棒的示例来讨论这个方法

00:03:28.650 --> 00:03:31.180
但是现在 请你现在把手放在键盘上 完成一个测试

