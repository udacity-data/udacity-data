WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.509
现在让我们通过编程评估查找其他质量问题

00:00:03.509 --> 00:00:06.134
在大概的目测评估后

00:00:06.134 --> 00:00:07.859
我一般喜欢对所有DataFrame

00:00:07.860 --> 00:00:11.250
使用 .info

00:00:11.250 --> 00:00:13.789
除非我要找一些具体的内容

00:00:13.789 --> 00:00:16.214
所以现在对病人、治疗、不良反应的DataFrame

00:00:16.214 --> 00:00:19.804
使用 .info

00:00:19.804 --> 00:00:22.660
得到 .info 方法的文档页面

00:00:22.660 --> 00:00:25.210
它返回了每个DataFrame的简单总结

00:00:25.210 --> 00:00:27.940
我们得到了条目和列的数量

00:00:27.940 --> 00:00:30.420
分别为 503 和 14

00:00:30.420 --> 00:00:32.645
以及每一列的数据类型

00:00:32.645 --> 00:00:35.260
和整个DataFrame的占用内存

00:00:35.259 --> 00:00:38.109
我们看看这个病人摘要

00:00:38.109 --> 00:00:40.075
已经可以发现两个数据质量问题

00:00:40.075 --> 00:00:43.480
除了从地址到联系方式列

00:00:43.479 --> 00:00:47.140
其它所有列都有 503 条目

00:00:47.140 --> 00:00:51.240
而地址、城市、州、邮政编码、国家、联系方式只有 491

00:00:51.240 --> 00:00:53.770
这说明有些数据丢失了

00:00:53.770 --> 00:00:56.745
我们可以用这个编码进行进一步调查

00:00:56.744 --> 00:00:59.439
这个 patients ['address'].isnull 返回的是

00:00:59.439 --> 00:01:03.625
与DataFrame 503 大小相同的布尔数组

00:01:03.625 --> 00:01:08.935
以及是否地址列中的该行为空值

00:01:08.935 --> 00:01:10.390
通过布尔索引

00:01:10.390 --> 00:01:14.689
它会返回这些列中为空值的行

00:01:14.689 --> 00:01:16.730
以及这里所有的 NaN (非数字值)

00:01:16.730 --> 00:01:18.570
NaN 是缺失值

00:01:18.569 --> 00:01:20.719
所以这个是完整性问题

00:01:20.719 --> 00:01:22.135
这种情况为什么会发生？

00:01:22.135 --> 00:01:24.280
可能是简单的数据录入错误

00:01:24.280 --> 00:01:26.349
负责记录病人信息的人

00:01:26.349 --> 00:01:28.155
忘记填写这些病人的

00:01:28.155 --> 00:01:31.435
人口统计信息

00:01:31.435 --> 00:01:34.795
或者是数据库损坏问题

00:01:34.795 --> 00:01:40.147
一些文件传输问题导致这些条目变为空值

00:01:40.147 --> 00:01:42.310
各种各样的情况会导致这个问题发生

00:01:42.310 --> 00:01:45.835
但无论如何 我们这里没有人口统计信息 但我们需要这些信息

00:01:45.834 --> 00:01:48.250
尤其是之后我们可能想联系这些病人

00:01:48.250 --> 00:01:51.159
比如要告诉他们试验结果的好坏

00:01:51.159 --> 00:01:52.329
我们需要解决这个问题

00:01:52.329 --> 00:01:54.640
我不确定现在是否可以

00:01:54.640 --> 00:01:56.680
之后我们第四课会谈到

00:01:56.680 --> 00:01:59.035
现在先让我们记录下来

00:01:59.034 --> 00:02:03.069
这个 .info 方法还显示了另外一个数据质量问题

00:02:03.069 --> 00:02:05.324
与数据类型有关

00:02:05.325 --> 00:02:08.689
现在让我们观察每一列的数据类型 看看是否正确

00:02:08.689 --> 00:02:11.544
病人编号 整数 这是对的

00:02:11.544 --> 00:02:14.754
接下来六列是对象数据类型

00:02:14.754 --> 00:02:18.534
是 Pandas 代表字符串的方式 我们来看一下文本

00:02:18.534 --> 00:02:22.104
数据集中的性别分配为男性或女性

00:02:22.104 --> 00:02:26.939
所以更适合称之为分类数据类型 这种类型是存在的

00:02:26.939 --> 00:02:29.520
它在 Pandas 中是一种类别

00:02:29.520 --> 00:02:30.945
所以名、姓、地址、城市

00:02:30.944 --> 00:02:34.129
被认为是对象数据类型 这是对的

00:02:34.129 --> 00:02:37.590
但我认为州也应该是一种分类数据

00:02:37.590 --> 00:02:39.990
现在我们来看看邮编列

00:02:39.990 --> 00:02:44.055
之前我们认为这个是有争议的 现在它是浮点型数据

00:02:44.055 --> 00:02:48.135
但这样是无效的 因为邮编必须是字符串

00:02:48.134 --> 00:02:52.530
而不是浮点数或整数 因为你不会对邮编进行计算

00:02:52.530 --> 00:02:54.599
比如与邮编相乘

00:02:54.599 --> 00:02:56.685
国家是对象数据 这是对的

00:02:56.685 --> 00:02:58.719
联系方式是对象数据 对的

00:02:58.719 --> 00:03:02.462
不过联系方式列还是有问题 一列中有两个变量

00:03:02.462 --> 00:03:06.354
电话号码和邮箱 但这两个变量本身是对象变量

00:03:06.354 --> 00:03:08.174
所以从数据类型角度来讲是没有问题的

00:03:08.175 --> 00:03:10.210
这里说生日是对象

00:03:10.210 --> 00:03:13.344
生日其实应该是日期时间类型

00:03:13.344 --> 00:03:16.354
体重是浮点数 身高是整数 这是对的

00:03:16.354 --> 00:03:19.004
身高可以四舍五入为最接近的整数

00:03:19.004 --> 00:03:21.715
BMI 是浮点数 这也是对的

00:03:21.715 --> 00:03:25.425
所以这里总共有四个数据类型错误 即性别分配

00:03:25.425 --> 00:03:27.870
州、邮编、生日

00:03:27.870 --> 00:03:30.599
为什么数据类型对变更来讲很重要？

00:03:30.599 --> 00:03:33.090
主要是在 Pandas 中 你可以对这些

00:03:33.090 --> 00:03:37.080
分类、值甚至日期时间数据类型

00:03:37.080 --> 00:03:40.050
进行特殊计算和总结

00:03:40.050 --> 00:03:43.540
如果类别划分不对 则无法完成计算或总结

00:03:43.539 --> 00:03:47.439
比如说 生日必须是日期时间数据类型

00:03:47.439 --> 00:03:50.329
如果把它划分为对象数据

00:03:50.330 --> 00:03:54.150
我们就无法使用 Pandas 的时序或日期时间功能

00:03:54.150 --> 00:03:56.805
而本来我们可以用这些丰富并且简单的功能

00:03:56.805 --> 00:04:00.810
来根据出生日期计算年龄

00:04:00.810 --> 00:04:03.735
所以这些数据类型错误都是有效性问题

00:04:03.735 --> 00:04:07.860
它们不符合这个表格预定的数据库对象

00:04:07.860 --> 00:04:10.450
其实治疗表中还有两个问题

00:04:10.449 --> 00:04:14.744
要知道 这些 Auralin 和 Novodra 列是初始剂量和结束剂量

00:04:14.745 --> 00:04:17.105
所以其实应该是整数

00:04:17.105 --> 00:04:18.430
之后我们再来处理

00:04:18.430 --> 00:04:22.030
现在先记录下这些问题

00:04:26.540 --> 00:04:31.135
向上滚动至之前的目测评估

00:04:31.134 --> 00:04:33.969
会发现有些数据类型问题非常明显

00:04:33.970 --> 00:04:35.635
比如这个邮编

00:04:35.634 --> 00:04:37.860
这里明显是浮点数 但它其实应该是字符串

00:04:37.860 --> 00:04:40.210
但其它就不明显了 比如生日

00:04:40.209 --> 00:04:43.089
不太明显 但其实这里不是日期时间数据类型

00:04:43.089 --> 00:04:46.514
本数据集中的性别分配也是这样 它应该是分类数据

00:04:46.514 --> 00:04:49.569
这就是编程评估至关重要的原因之一

00:04:49.569 --> 00:04:52.175
那为什么会出现这些数据类型错误？

00:04:52.175 --> 00:04:55.615
根本上来说 软件无法完美地识别数据类型

00:04:55.615 --> 00:04:58.060
如果一开始是按照个人感觉

00:04:58.060 --> 00:05:00.685
在电子表格应用中记录本数据集中的数据

00:05:00.685 --> 00:05:04.495
然后将其从该电子表格应用中导出 再导入 Pandas

00:05:04.495 --> 00:05:06.730
这就可能会产生一些问题

00:05:06.730 --> 00:05:09.110
这个是 Google Sheets 中的病人表格

00:05:09.110 --> 00:05:13.735
在这个表格中 邮编列在浮点数和整数这个问题上是没问题的

00:05:13.735 --> 00:05:15.465
没有小数点

00:05:15.464 --> 00:05:18.134
但是 Pandas 错误地认为它是浮点数

00:05:18.134 --> 00:05:19.795
当你往 Pandas 导入数据时

00:05:19.795 --> 00:05:21.425
一定要注意你的数据类型

00:05:21.425 --> 00:05:23.699
一开始经常是有问题的

00:05:23.699 --> 00:05:26.949
另外一个好用的编程评估就是 .describe

00:05:26.949 --> 00:05:29.584
一般在 info 之后我就喜欢用这个方法

00:05:29.584 --> 00:05:34.180
Describe 会生成对DataFrame中值数据类型的描述性统计

00:05:34.180 --> 00:05:36.625
我们对病人和治疗表格使用它

00:05:36.625 --> 00:05:40.314
我们会得到计数、平均值、标准偏差、最小值

00:05:40.314 --> 00:05:41.800
分位数 25% 50% 和 75%

00:05:41.800 --> 00:05:44.725
以及最大值

00:05:44.725 --> 00:05:48.350
这个统计对病人和邮编来说用处不大

00:05:48.350 --> 00:05:51.325
记得之前说过 邮编其实不应该是值数据

00:05:51.324 --> 00:05:55.834
同样 病人 ID 也应该是字符串 而不是整数

00:05:55.834 --> 00:05:57.370
不过这个尚有争议

00:05:57.370 --> 00:05:59.660
但这些统计对体重、身高和 BMI 很有用

00:05:59.660 --> 00:06:03.206
我们看看对治疗表格运行 describe 的结果

00:06:03.206 --> 00:06:07.235
hba1c_start hba1c_end 和 hba1c_change

00:06:07.235 --> 00:06:10.525
之前说过 这个指标代表了胰岛素

00:06:10.524 --> 00:06:12.879
在控制血糖方面的效果

00:06:12.879 --> 00:06:16.930
hba1c_change 如果在 0.4 左右 即是成功

00:06:16.930 --> 00:06:22.209
所以虽然这个需要一些专业知识 但是 0.9 这个值太大了

00:06:22.209 --> 00:06:25.164
这个变更太大了 有点不合情理

00:06:25.165 --> 00:06:28.590
尤其在 75% 时是 0.92

00:06:28.589 --> 00:06:31.164
这意味着巨大的偏差

00:06:31.165 --> 00:06:34.975
25% 和 50% 之间只差 0.04

00:06:34.975 --> 00:06:39.285
而 50% 和 75% 之间差了接近 0.6

00:06:39.285 --> 00:06:41.950
向上滑动至治疗表的目测评估

00:06:41.949 --> 00:06:44.675
可以发现 Elliot Richardson 的

00:06:44.675 --> 00:06:47.316
hba1c_change 为 0.97

00:06:47.315 --> 00:06:49.519
这个只是简单的计算错误

00:06:49.519 --> 00:06:53.299
7.56 减去 7.09 不是 0.97

00:06:53.300 --> 00:06:55.254
而是 0.47

00:06:55.254 --> 00:06:57.490
这个是准确性问题

00:06:57.490 --> 00:06:59.254
为什么会出现这样的情况呢？

00:06:59.254 --> 00:07:02.350
我感觉可能是记录 hba1c_change

00:07:02.350 --> 00:07:05.620
的医护人员或者医生

00:07:05.620 --> 00:07:08.735
写的 4 被错误地看成 9

00:07:08.735 --> 00:07:12.040
医生书写不清晰这个问题 大家都明白的

00:07:12.040 --> 00:07:15.310
这个问题很傻 但的确时有发生

00:07:15.310 --> 00:07:18.339
尤其是使用光学字符识别软件

00:07:18.339 --> 00:07:21.489
将纸质记录转为电子记录时

00:07:21.490 --> 00:07:23.189
解决这个问题非常重要

00:07:23.189 --> 00:07:27.660
因为 hba1c_change 对我们整个临床试验来讲是一个关键指标

00:07:27.660 --> 00:07:30.430
这款口服胰岛素的成功或失败

00:07:30.430 --> 00:07:32.915
都由这个变量决定

00:07:32.915 --> 00:07:40.720
所以一定要记录下来

00:07:40.720 --> 00:07:46.900
现在我们再来使用一种编程评估查找质量问题

00:07:46.899 --> 00:07:50.239
是我很喜欢用的一种灵巧的方法 .sample

00:07:50.240 --> 00:07:54.699
在当前情况下 它会返回表格中五个随机记录样本

00:07:54.699 --> 00:07:57.594
你可以看到这个超级混乱的联系方式列

00:07:57.595 --> 00:07:59.320
同时记录了电话号码和邮箱

00:07:59.319 --> 00:08:02.589
然后会发现电话号码的表达方式各有不同

00:08:02.589 --> 00:08:04.314
这个号码是三位数字的区号

00:08:04.314 --> 00:08:05.769
然后破折号 再三位数字

00:08:05.769 --> 00:08:07.174
破折号 然后四位数字

00:08:07.175 --> 00:08:10.960
但是下面这个 先是国家代码 1 然后空格

00:08:10.959 --> 00:08:12.639
再是区号 空格

00:08:12.639 --> 00:08:15.550
三位数字 空格 最后四位数字

00:08:15.550 --> 00:08:17.560
这个几乎可以确定为一个数据输入错误

00:08:17.560 --> 00:08:19.569
但并不太需要解决

00:08:19.569 --> 00:08:22.689
因为如果查看这个数据集的人不知道国家代码

00:08:22.689 --> 00:08:26.410
这样他们不需要再去查 可以节省几分钟的时间

00:08:26.410 --> 00:08:27.580
不过我们还是来处理这个问题吧

00:08:27.579 --> 00:08:30.719
先记录下来 这样处理过程会更容易

00:08:30.720 --> 00:08:34.120
这个又是一致性问题了

