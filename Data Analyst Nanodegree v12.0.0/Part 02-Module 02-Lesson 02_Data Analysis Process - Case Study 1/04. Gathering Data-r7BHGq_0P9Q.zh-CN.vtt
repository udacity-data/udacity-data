WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.115
在 Jupyter Notebook 里打开这些数据集

00:00:03.115 --> 00:00:08.044
我下载了些 CSV 文件并把它们放到与这个 Notebook 相同的目录下

00:00:08.044 --> 00:00:09.731
就像上节课我们做的一样

00:00:09.731 --> 00:00:14.739
我们可以把文件名作为参数 用 Pandas 的 read_csv 函数来读取数据集

00:00:14.740 --> 00:00:17.754
这是怎么了？

00:00:17.754 --> 00:00:19.983
所有数据读出来成一列了

00:00:19.983 --> 00:00:23.250
而且看起来那些值都是由分号隔开的

00:00:23.250 --> 00:00:27.949
有时候 CSV 文件用不同的符号来分隔值

00:00:27.949 --> 00:00:32.579
我们可以把正确的分隔符作为参数 添加到 read_csv 函数中

00:00:32.579 --> 00:00:34.729
因为这个参数默认是逗号

00:00:34.729 --> 00:00:38.224
所以一般我们不用具体说明分隔符

00:00:38.225 --> 00:00:43.210
好了 第一次读取 CSV 文件总会有些问题的

00:00:43.210 --> 00:00:47.490
比如 如果你不知道 CSV 文件没有标题行

00:00:47.490 --> 00:00:50.490
那你一开始可能会错误地把值放到第一行去

00:00:50.490 --> 00:00:52.829
那么值就会变成列名 然后你才会发现

00:00:52.829 --> 00:00:56.015
需要设定参数才能设置你要的列名

00:00:56.015 --> 00:00:59.105
你也可以自己检查文件

00:00:59.104 --> 00:01:01.619
方法之一

00:01:01.619 --> 00:01:04.709
是在文本编辑器或 Google Sheets 之类的电子表格程序中打开文件检查

00:01:04.709 --> 00:01:06.524
但如果你要处理的是大数据集

00:01:06.525 --> 00:01:09.980
这么做可能要加载很久 甚至会使程序崩溃

00:01:09.980 --> 00:01:13.820
这种情况下 在 Pandas 里试错会更好

