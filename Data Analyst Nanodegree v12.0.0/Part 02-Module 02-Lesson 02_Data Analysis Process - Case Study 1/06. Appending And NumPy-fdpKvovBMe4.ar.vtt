WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:02.459
لتحليل بياناتنا بشكل أكثر كفاءة،

00:00:02.459 --> 00:00:06.540
دَعونا ندمج مجموعات البيانات الحمراء والبيضاء في
إطار بيانات واحد.

00:00:06.540 --> 00:00:09.839
قبل القيام بذلك، نحتاج إلى إضافة ميزة أو عمود جديد

00:00:09.839 --> 00:00:14.160
لكل إطار بيانات يشير إلى ما إذا كان الشراب أحمر أو
أبيض.

00:00:14.160 --> 00:00:16.289
بهذه الطريقة سنحافظ على هذه الخاصية المميزة

00:00:16.289 --> 00:00:19.309
لكل عينة عندما يتم دمج إطارات البيانات.

00:00:19.309 --> 00:00:22.125
إحدى الطرق التي يمكننا القيام بها هي إنشاء مصفوفة
باستخدام

00:00:22.125 --> 00:00:25.850
NumPy وإضافة ذلك كعمود في كل إطار للبيانات.

00:00:25.850 --> 00:00:28.922
دعونا نتعرف على NumPy وكيف يمكننا استخدامها للقيام
بذلك.

00:00:28.922 --> 00:00:35.270
NumPy هو اختصار لـ Python العددية وهو مصمم للحوسبة
العلمية الفعالة.

00:00:35.270 --> 00:00:37.650
إنها مبنية على أعلى معايير لغة البرمجة C

00:00:37.649 --> 00:00:40.350
 التي تعمل بمستوى أقل على الكمبيوتر الخاص بنا.

00:00:40.350 --> 00:00:42.570
لفهم ما يعنيه هذا  في سرعة

00:00:42.570 --> 00:00:44.320
تعليماتنا برمجية، انظر الرابط في ملاحظات المعلم.

00:00:44.320 --> 00:00:47.831
بنيت Pandas على قمة NumPy

00:00:47.831 --> 00:00:52.710
وهذا هو السبب في أنه سريع جدا مع كل هذه الحسابات
لدوال مثل Describe.

00:00:52.710 --> 00:00:57.780
إذا حاولت القيام بهذه العمليات الحسابية في Python
العادية، فإنها ستكون أبطأ بكثير.

00:00:57.780 --> 00:01:02.890
إليك مثال: حساب المتوسط مصفوفة من 100 مليون قيمة.

00:01:02.890 --> 00:01:07.790
هذا يولد مجموعة من 100 مليون عوامات عشوائية بين صفر
وواحد.

00:01:07.790 --> 00:01:11.090
يمكننا أيضًا كتابة 1e8 لإيضاح ذلك.

00:01:11.090 --> 00:01:14.760
يبدو أن توفير العوامة عندما يتطلب int.

00:01:14.760 --> 00:01:18.035
دعونا نرى كم من الوقت يستغرق Python القياسي لحساب
متوسط هذا المصفوفة.

00:01:18.034 --> 00:01:24.129
حسنًا، ما يزيد قليلا عن 9 ثوان.

00:01:24.129 --> 00:01:25.899
الآن دعونا نرى كم من الوقت يستغرق NumPy.

00:01:25.900 --> 00:01:30.165
تقريبًا لحظة تقريبًا.

00:01:30.165 --> 00:01:32.609
أليس هذا رائع؟ تخيل كم يُسرع هذا

00:01:32.609 --> 00:01:35.579
المعالجة عندما يكون هناك المزيد من عمليات الحوسبة
تحدث.

00:01:35.579 --> 00:01:37.590
على سبيل المثال، لنفترض أننا نقوم بهندسة

00:01:37.590 --> 00:01:40.320
ميزة أو عمود جديد بالكامل والذي تحسبونه

00:01:40.319 --> 00:01:42.059
بضرب القيم في عمودين معًا

00:01:42.060 --> 00:01:46.025
وقسمتها حسب القيم في عمود آخر لكل صف.

00:01:46.025 --> 00:01:48.525
بخلاف NumPy، ستتطلب Python العادية

00:01:48.525 --> 00:01:53.359
حلقة طويلة بشكل كبير خلال كافة الصفوف لحساب قيمة
جديدة لكل صف.

00:01:53.359 --> 00:01:55.769
والكائن الرئيسي الذي نعمل معه في NumPy

00:01:55.769 --> 00:01:59.599
مصفوفة متعددة الأبعاد من قيم جميع أنواع البيانات
نفسه.

00:01:59.599 --> 00:02:01.989
هذه المصفوفات، إلى جانب العديد من الدوال المفيدة في
NumPy،

00:02:01.989 --> 00:02:06.054
تعمل على تحسين وتبسيط العمليات التي تجرى على
البيانات.

00:02:06.055 --> 00:02:08.310
ستعرفون المزيد عن مصفوفات NumPy في وقت لاحق.

00:02:08.310 --> 00:02:09.735
وفي القسم التالي،

00:02:09.735 --> 00:02:11.520
ستستخدمون NumPy لإنشاء مصفوفة

00:02:11.520 --> 00:02:14.040
لعمود لون جديد لإطارات البيانات الحمراء والبيضاء.

