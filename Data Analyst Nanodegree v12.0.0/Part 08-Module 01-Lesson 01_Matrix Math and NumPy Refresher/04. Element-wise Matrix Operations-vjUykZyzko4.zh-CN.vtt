WEBVTT
Kind: captions
Language: zh-CN

00:00:00.800 --> 00:00:03.500
相信你已经熟悉标量数学了

00:00:03.500 --> 00:00:06.365
它就是平常的加法、乘法等等

00:00:06.365 --> 00:00:08.560
你生活中的大部分时间都在用

00:00:08.560 --> 00:00:10.400
但有时 就好像神经网络一样

00:00:10.400 --> 00:00:12.650
你可能需要对很多数字执行运算

00:00:12.650 --> 00:00:15.470
这些数字可能成百上千

00:00:15.470 --> 00:00:16.609
甚至可能上百万

00:00:16.609 --> 00:00:19.699
你需要可能将它们翻一番 进行平方 或除以

00:00:19.699 --> 00:00:20.839
相同的数字

00:00:20.839 --> 00:00:22.326
如果你在编写一个程序

00:00:22.326 --> 00:00:24.199
你可能会创建一个循环 迭代

00:00:24.199 --> 00:00:27.109
每个值 并一遍遍对每个值执行相同的

00:00:27.109 --> 00:00:30.259
操作 但是矩阵提供了更好的替代方法

00:00:30.260 --> 00:00:32.509
如果你将所有的数字存储在一个矩阵中

00:00:32.509 --> 00:00:35.084
你可以对它们执行元素级操作

00:00:35.084 --> 00:00:37.250
这意味着你要在矩阵中分别处理它们

00:00:37.250 --> 00:00:40.280
然后对每个上执行同样的操作

00:00:40.280 --> 00:00:42.230
顺便说下 我称之为矩阵 但是这一元素级概念

00:00:42.229 --> 00:00:43.939
适用于具有任意维数

00:00:43.939 --> 00:00:45.710
的数据

00:00:45.710 --> 00:00:49.070
要加上两个标量的话 很简单 就像 2 + 3 = 5

00:00:49.070 --> 00:00:50.869
要加上一个标量和一个矩阵的话 

00:00:50.869 --> 00:00:52.669
实际上做法是相同的

00:00:52.670 --> 00:00:55.850
只需给矩阵当中的每一项加上一个标量

00:00:55.850 --> 00:01:01.760
所以 2 加上矩阵当中的 1、2、3、4 就得到了矩阵当中的 3、4、5、6

00:01:01.759 --> 00:01:04.640
你也可以在没有另一个数学运算符的情况下执行相同的操作

00:01:04.640 --> 00:01:06.560
来看一个实际例子

00:01:06.560 --> 00:01:08.060
假设我们有一个值矩阵

00:01:08.060 --> 00:01:11.180
代表图像的红色通道

00:01:11.180 --> 00:01:13.340
假设我们在使用 RGB 色彩

00:01:13.340 --> 00:01:17.210
每个值是单个字节 范围从 0 到 255

00:01:17.209 --> 00:01:19.189
但是如果说我们要归一化这些值

00:01:19.189 --> 00:01:21.079
并把它们都转化为浮点值

00:01:21.079 --> 00:01:23.019
范围从 0 到 1

00:01:23.019 --> 00:01:23.659
那很简单

00:01:23.659 --> 00:01:27.109
我们只需将此矩阵在元素级别除以 255

00:01:27.109 --> 00:01:28.700
顺便说一下 如果你不知道

00:01:28.700 --> 00:01:30.290
归一化是什么意思 不用担心

00:01:30.290 --> 00:01:32.550
你会在稍后的课程中更详细地了解

00:01:32.549 --> 00:01:35.269
这不仅适用于矩阵当中的标量

00:01:35.269 --> 00:01:36.899
你还可以在两个不同矩阵的所有元素之间

00:01:36.900 --> 00:01:39.890
进行元素级数学计算

00:01:39.890 --> 00:01:43.219
要使它成功 这两个矩阵的形状要一样

00:01:43.219 --> 00:01:46.849
就比如说 这里我们有一对 2 x 2 的矩阵

00:01:46.849 --> 00:01:48.679
为了把它们加在一起

00:01:48.680 --> 00:01:52.415
我们只要把每个矩阵当中处于同一索引的数对加起来

00:01:52.415 --> 00:01:55.040
然后将答案存储在答案矩阵中的

00:01:55.040 --> 00:01:56.330
相同位置

00:01:56.329 --> 00:01:58.789
所以在索引 1,1 处 我们将获得

00:01:58.790 --> 00:02:01.720
1 + 2 的结果 也就是 3

00:02:01.719 --> 00:02:03.679
在索引 1,2 处 我们会获得

00:02:03.680 --> 00:02:07.590
3 + 4 的结果 也就是 7 以此类推

00:02:07.590 --> 00:02:10.159
跟前面我所说的你可以在标量和矩阵之间

00:02:10.159 --> 00:02:13.490
进行任何常规的数学运算一样

00:02:13.490 --> 00:02:15.680
你也可以在两个形状相同的矩阵

00:02:15.680 --> 00:02:17.569
的对应元素之间

00:02:17.569 --> 00:02:19.769
执行这些运算

