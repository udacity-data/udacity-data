WEBVTT
Kind: captions
Language: en

00:00:00.740 --> 00:00:03.421
Neural networks do a
lot of math with a lot of data.

00:00:03.420 --> 00:00:05.419
But before we can start
designing those networks

00:00:05.419 --> 00:00:08.779
ourselves, and making sure all
that math is set up correctly,

00:00:08.779 --> 00:00:12.599
we first need to understand
how we represent that data.

00:00:12.599 --> 00:00:16.350
Specifically, we need to think
about the shapes data can have.

00:00:16.350 --> 00:00:19.140
For example, we might have a
single number, representing

00:00:19.140 --> 00:00:21.060
a person's height
in centimeters,

00:00:21.059 --> 00:00:22.529
or a list of
numbers representing

00:00:22.530 --> 00:00:26.789
various features of that person,
like height, weight, and age.

00:00:26.789 --> 00:00:28.599
Or maybe we have an
image of that person

00:00:28.600 --> 00:00:31.200
and represent it as a
grid, with rows and columns

00:00:31.199 --> 00:00:32.939
of individual pixels.

00:00:32.939 --> 00:00:35.460
And one possible way to
represent a single pixel

00:00:35.460 --> 00:00:38.370
in that image might
use three numbers,

00:00:38.369 --> 00:00:41.393
one for each of the red, blue,
and green color channels.

00:00:41.393 --> 00:00:42.809
We describe these
different shapes

00:00:42.810 --> 00:00:45.359
of data in terms of their
number of dimensions.

00:00:45.359 --> 00:00:49.229
First, we have the smallest,
simplest shape, a single value,

00:00:49.229 --> 00:00:53.589
like 1, 2.4, or negative 0.3.

00:00:53.590 --> 00:00:55.540
These are called scalars.

00:00:55.539 --> 00:00:56.380
We see that scalars.

00:00:56.380 --> 00:00:58.000
Have zero dimensions.

00:00:58.000 --> 00:01:00.429
It's impossible to
visualize zero dimensions,

00:01:00.429 --> 00:01:01.659
but just go with it.

00:01:01.659 --> 00:01:03.709
That's how scalars are defined.

00:01:03.710 --> 00:01:05.920
So from the examples
before, a person's height

00:01:05.920 --> 00:01:08.950
would be a scalar and have
a zero-dimensional shape.

00:01:08.950 --> 00:01:11.890
Then, there are lists of
values called vectors.

00:01:11.890 --> 00:01:14.829
There are two types, row
vectors and column vectors.

00:01:14.828 --> 00:01:16.119
They can store the same things.

00:01:16.120 --> 00:01:18.161
But conceptually, you
would think of a row vector

00:01:18.161 --> 00:01:21.700
like this, 1, 2, 3, ordered
horizontally from left

00:01:21.700 --> 00:01:26.020
to right, and a column vector
like this, 1, 2, 3, ordered

00:01:26.019 --> 00:01:27.759
vertically from top to bottom.

00:01:27.760 --> 00:01:29.920
The reason to use one type
of vector over the other

00:01:29.920 --> 00:01:31.611
is sometimes just a
personal preference.

00:01:31.611 --> 00:01:33.069
But other times,
the shape actually

00:01:33.069 --> 00:01:35.119
affects the math you can do.

00:01:35.120 --> 00:01:38.140
Either way, a vector is said
to have one dimension, which

00:01:38.140 --> 00:01:39.459
we call its length.

00:01:39.459 --> 00:01:42.179
So each of these two
vectors has a length of 3.

00:01:42.180 --> 00:01:44.650
Our list from before, with
a person's height, weight,

00:01:44.650 --> 00:01:47.109
and age, could be
stored as a vector.

00:01:47.109 --> 00:01:49.040
Next up, we have matrices.

00:01:49.040 --> 00:01:52.330
A matrix is a two-dimensional
grid of values.

00:01:52.329 --> 00:01:53.920
We describe the
shape of a matrix

00:01:53.920 --> 00:01:56.989
in terms of its numbers
of rows and columns.

00:01:56.989 --> 00:02:01.179
So if you had these two rows
of data, 1, 2, 3, and 4, 5, 6,

00:02:01.180 --> 00:02:03.670
that's two rows
and three columns.

00:02:03.670 --> 00:02:06.049
So we'd say it's
a 2 by 3 matrix.

00:02:06.049 --> 00:02:08.859
If you had a single number
for each pixel of an image,

00:02:08.860 --> 00:02:12.300
then you could store those
pixel values in a matrix.

00:02:12.300 --> 00:02:14.829
Finally, there are
things called tensors.

00:02:14.829 --> 00:02:16.620
You'll hear this term
a lot in this course.

00:02:16.620 --> 00:02:18.286
Because you'll spend
quite a bit of time

00:02:18.286 --> 00:02:20.259
using a software library
called TensorFlow,

00:02:20.259 --> 00:02:23.340
and it deals with all its
data in the form of tensors.

00:02:23.340 --> 00:02:26.039
The term tensor can refer to
any n-dimensional collection

00:02:26.039 --> 00:02:27.299
of values.

00:02:27.300 --> 00:02:29.990
So a scalar is a
zero-dimensional tensor;

00:02:29.990 --> 00:02:32.520
a vector is a
one-dimensional tensor;

00:02:32.520 --> 00:02:35.400
a matrix is a
two-dimensional tensor;

00:02:35.400 --> 00:02:37.110
and anything larger
than two dimensions,

00:02:37.110 --> 00:02:38.870
we just call it tensor.

00:02:38.870 --> 00:02:40.610
The problem is higher
dimensional data

00:02:40.610 --> 00:02:42.730
can be difficult to visualize.

00:02:42.729 --> 00:02:45.799
For three dimensions, you might
picture a stack of matrices.

00:02:45.800 --> 00:02:49.160
But you could just as easily
picture a list of matrices,

00:02:49.159 --> 00:02:51.129
or a matrix of vectors.

00:02:51.129 --> 00:02:53.780
And for four dimensions,
you might think of a matrix

00:02:53.780 --> 00:02:55.699
where each of its
entries is itself

00:02:55.699 --> 00:02:58.399
a matrix, or maybe
a list or stack

00:02:58.400 --> 00:03:01.241
of stacks of matrices, or
maybe even something else.

00:03:01.241 --> 00:03:02.990
And it just keeps
getting more complicated

00:03:02.990 --> 00:03:04.760
as the number of
dimensions goes up.

00:03:04.759 --> 00:03:05.840
The important thing
to remember is

00:03:05.840 --> 00:03:07.520
that even if you have
trouble imagining

00:03:07.520 --> 00:03:09.500
how the data is arranged,
you can probably

00:03:09.500 --> 00:03:11.060
still make the math work.

00:03:11.060 --> 00:03:12.800
So back to our earlier
examples, if we

00:03:12.800 --> 00:03:14.840
had a separate value
for each color channel

00:03:14.840 --> 00:03:16.819
of each pixel of
an image, we could

00:03:16.819 --> 00:03:19.219
store those as a
three-dimensional tensor

00:03:19.219 --> 00:03:22.686
with separate planes for
red, green, and blue values.

00:03:22.686 --> 00:03:24.560
For these lessons, we'll
mostly talk in terms

00:03:24.560 --> 00:03:26.810
of scalars and matrices.

00:03:26.810 --> 00:03:29.629
When we use vectors, we'll just
think of them as matrices, too,

00:03:29.629 --> 00:03:31.930
where one of their
dimensions is size 1.

00:03:31.930 --> 00:03:33.680
For example, when
considering these length

00:03:33.680 --> 00:03:35.870
three vectors from
earlier, we would

00:03:35.870 --> 00:03:39.370
say this row vector
is a 1 by 3 matrix.

00:03:39.370 --> 00:03:42.650
And this column actor
is a 3 by 1 matrix.

00:03:42.650 --> 00:03:45.510
We'll also sometimes need to
refer to individual elements

00:03:45.509 --> 00:03:47.340
inside of matrix.

00:03:47.340 --> 00:03:51.530
We do that using its index,
which is its row then column.

00:03:51.530 --> 00:03:54.439
So if this matrix were
named A, its values

00:03:54.439 --> 00:03:56.379
are located at these indices.

00:03:56.379 --> 00:04:01.310
The indices of the locations in
the first row are A 1 1, A 1 2,

00:04:01.310 --> 00:04:02.680
and A 1 3.

00:04:02.680 --> 00:04:07.025
The locations in the second row
are at indices A 2 1, A 2 2,

00:04:07.025 --> 00:04:09.719
and A 2 3, and so on.

00:04:09.719 --> 00:04:12.606
So we'd say the
value at A 3 2 is 8.

00:04:12.606 --> 00:04:13.939
One last thing I should mention.

00:04:13.939 --> 00:04:16.850
In math books, things you read
online, even most of the things

00:04:16.850 --> 00:04:19.120
you read in this
class, indices usually

00:04:19.120 --> 00:04:20.720
start at 1, like
I've shown here.

00:04:20.720 --> 00:04:23.840
See how the first row is
row 1 and the first column

00:04:23.839 --> 00:04:25.129
is column 1?

00:04:25.129 --> 00:04:26.899
Counting from one
makes perfect sense.

00:04:26.899 --> 00:04:29.779
But in programming languages,
it's more common for indices

00:04:29.779 --> 00:04:32.479
to start at 0, which
looks like this.

00:04:32.480 --> 00:04:35.670
All the indices are just one
less than you might expect.

00:04:35.670 --> 00:04:39.199
So in code, instead of that
8 being at index A 3 2,

00:04:39.199 --> 00:04:41.231
we'd say it's at index A 2 1.

00:04:41.232 --> 00:04:43.190
If you've got some
experience writing software,

00:04:43.189 --> 00:04:44.350
you're probably
already used to this,

00:04:44.350 --> 00:04:46.480
so just keep in mind that
most written material is

00:04:46.480 --> 00:04:47.600
indexed from 1.

00:04:47.600 --> 00:04:49.070
But if you're new
to programming,

00:04:49.069 --> 00:04:51.110
it's almost certainly
going to take you some time

00:04:51.110 --> 00:04:53.289
to get used to counting from 0.

