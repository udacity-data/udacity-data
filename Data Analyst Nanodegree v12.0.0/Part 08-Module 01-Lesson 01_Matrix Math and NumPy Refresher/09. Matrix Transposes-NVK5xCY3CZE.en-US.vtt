WEBVTT
Kind: captions
Language: en-US

00:00:00.050 --> 00:00:02.049
Now that you
know about matrix shapes,

00:00:02.049 --> 00:00:03.769
and how they affect
the math you can do,

00:00:03.770 --> 00:00:06.019
there's something important
you need to know about,

00:00:06.019 --> 00:00:07.949
the matrix transpose.

00:00:07.950 --> 00:00:10.620
The transpose of a matrix is
a matrix with the same values

00:00:10.619 --> 00:00:11.789
as the original.

00:00:11.789 --> 00:00:14.309
But it has the rows
and columns switched.

00:00:14.310 --> 00:00:17.980
So the transpose of this
square matrix is this matrix.

00:00:17.980 --> 00:00:20.910
You can see the values in
row 1 of the original matrix,

00:00:20.910 --> 00:00:24.954
1, 2, 3, are now the values
of column 1 in the transpose.

00:00:24.954 --> 00:00:27.329
And the same thing happened
for the second and third rows

00:00:27.329 --> 00:00:29.879
in the original, becoming
the second and third columns

00:00:29.879 --> 00:00:31.089
in the transpose.

00:00:31.089 --> 00:00:33.320
It works for non-square
matrices, too.

00:00:33.320 --> 00:00:35.712
The transpose of this is this.

00:00:35.712 --> 00:00:37.670
Again, you can see how
the rows of the original

00:00:37.670 --> 00:00:39.780
become the columns
in the transpose.

00:00:39.780 --> 00:00:41.910
We really are just swapping
the rows and columns.

00:00:41.909 --> 00:00:44.159
But there are two important
features of a transpose.

00:00:44.159 --> 00:00:47.659
First, if the original
matrix wasn't a square,

00:00:47.659 --> 00:00:50.969
the transpose has a new shape
with the original dimensions

00:00:50.969 --> 00:00:51.659
swapped.

00:00:51.659 --> 00:00:55.911
So the transpose of a 4 by
2 matrix is a 2 by 4 matrix.

00:00:55.911 --> 00:00:57.119
This can be helpful at times.

00:00:57.119 --> 00:00:58.952
For example, if you
need to perform a matrix

00:00:58.953 --> 00:01:01.140
multiplication, but the
shapes of your matrices

00:01:01.140 --> 00:01:02.640
are incompatible.

00:01:02.640 --> 00:01:05.849
The second important thing is
that the data in the transpose

00:01:05.849 --> 00:01:08.759
isn't arranged the way it
was in the original matrix.

00:01:08.760 --> 00:01:11.219
If the original matrix
represents rows of data,

00:01:11.219 --> 00:01:13.760
the transpose will
represent columns.

00:01:13.760 --> 00:01:15.690
And if the original was
arranged as columns,

00:01:15.689 --> 00:01:17.947
the transpose will
be arranged as rows.

00:01:17.947 --> 00:01:19.530
Just in case that
sounds too abstract,

00:01:19.530 --> 00:01:22.370
here's an example of what I mean
when I talk about data arranged

00:01:22.370 --> 00:01:24.030
as rows or columns.

00:01:24.030 --> 00:01:26.549
Imagine we had a matrix that
stored the heights, weights,

00:01:26.549 --> 00:01:28.379
and ages of three people.

00:01:28.379 --> 00:01:31.560
We could choose to store each
person's data as a single row

00:01:31.560 --> 00:01:33.390
or a single column.

00:01:33.390 --> 00:01:35.280
If we choose rows,
then each column

00:01:35.280 --> 00:01:38.219
ends up representing a specific
feature for all the people,

00:01:38.219 --> 00:01:40.329
like height, weight or age.

00:01:40.329 --> 00:01:42.810
However, if we store each
person's data as a column,

00:01:42.810 --> 00:01:46.230
then each row contains all the
values for a specific feature.

00:01:46.230 --> 00:01:49.170
But now, imagine we
look at the transpose.

00:01:49.170 --> 00:01:52.350
What used to be rows are
now columns, and vice versa.

00:01:52.349 --> 00:01:54.000
I've mentioned this
multiple times now.

00:01:54.000 --> 00:01:55.731
But if you're
multiplying two matrices,

00:01:55.731 --> 00:01:57.689
you're dealing with the
rows in the left matrix

00:01:57.689 --> 00:01:59.250
and the columns in the right.

00:01:59.250 --> 00:02:01.840
This is why this
discussion is so important.

00:02:01.840 --> 00:02:03.390
If you have a math
problem working

00:02:03.390 --> 00:02:05.609
with all the features
for one person,

00:02:05.609 --> 00:02:08.159
it's probably different than
working with a single feature

00:02:08.159 --> 00:02:09.590
for all the people.

00:02:09.590 --> 00:02:11.280
And most likely,
only one of those

00:02:11.280 --> 00:02:13.140
was actually what
you were looking for.

00:02:13.139 --> 00:02:15.909
This is going to come up when
you build your neural networks.

00:02:15.909 --> 00:02:18.180
You'll run into times
when some matrix

00:02:18.180 --> 00:02:21.180
operation won't work because the
shapes don't line up correctly.

00:02:21.180 --> 00:02:22.950
But then you'll
notice it would work

00:02:22.949 --> 00:02:25.079
if you throw in a
transpose, like maybe you're

00:02:25.080 --> 00:02:28.800
trying to multiply these 3
by 2 and 4 by 2 matrices.

00:02:28.800 --> 00:02:30.510
In the matrix
multiplication lessons,

00:02:30.509 --> 00:02:32.717
you learned that won't work,
because their dimensions

00:02:32.717 --> 00:02:33.719
are incompatible.

00:02:33.719 --> 00:02:36.659
Remember, these two inside
numbers need to be the same.

00:02:36.659 --> 00:02:38.969
But here, we have a 2 and a 4.

00:02:38.969 --> 00:02:42.330
But if you were to take the
transpose of the 4 by 2 matrix,

00:02:42.330 --> 00:02:44.430
you'd have a 2 by 4
matrix, and then you

00:02:44.430 --> 00:02:47.700
can multiply the 3 by
2 and 2 by 4 matrices.

00:02:47.699 --> 00:02:50.009
Or let's go back and
consider another option.

00:02:50.009 --> 00:02:53.399
You could take the transpose
of the 3 by 2 matrix to get a 2

00:02:53.400 --> 00:02:57.210
by 3 matrix, then
swap their orders,

00:02:57.210 --> 00:03:00.659
and multiply the 4 by
2 and 2 by 3 matrices.

00:03:00.659 --> 00:03:03.120
Mathematically, both of
those solutions work.

00:03:03.120 --> 00:03:06.060
But the question is, when
you're in that situation,

00:03:06.060 --> 00:03:08.939
should you actually do
either of those things?

00:03:08.939 --> 00:03:11.009
And the answer is sometimes.

00:03:11.009 --> 00:03:12.618
We just need to know when.

00:03:12.618 --> 00:03:14.909
Let's go back to trying to
multiply these two matrices,

00:03:14.909 --> 00:03:17.129
a 3 by 2 and a 4 by 2.

00:03:17.129 --> 00:03:20.009
We've already shown we can
make this multiplication work

00:03:20.009 --> 00:03:21.699
two different ways
using transposes.

00:03:21.699 --> 00:03:24.689
But let's see when it
is or isn't a good idea.

00:03:24.689 --> 00:03:26.139
If both of these
matrices contain

00:03:26.139 --> 00:03:29.849
data arranged in rows, then
either solution will be fine.

00:03:29.849 --> 00:03:32.400
Using the transpose
of the second matrix

00:03:32.400 --> 00:03:34.650
gives us rose times
columns, and that's

00:03:34.650 --> 00:03:37.230
exactly what we want for
matrix multiplication.

00:03:37.229 --> 00:03:39.959
The answer will be
this 3 by 4 matrix.

00:03:39.960 --> 00:03:42.120
The second option, where
we take the transpose

00:03:42.120 --> 00:03:44.550
of the first matrix, and
then swap the orders,

00:03:44.550 --> 00:03:47.070
also gives us rows
times columns.

00:03:47.069 --> 00:03:49.859
This time the answer will
be this 4 by 3 matrix.

00:03:49.860 --> 00:03:50.640
So that's great.

00:03:50.639 --> 00:03:53.189
If both of the original matrices
store their data as rows,

00:03:53.189 --> 00:03:54.528
it's safe to use a transpose.

00:03:54.528 --> 00:03:56.069
By the way, you may
not have noticed,

00:03:56.069 --> 00:03:58.319
but the answers to each of
those two multiplications

00:03:58.319 --> 00:04:00.689
are actually transposes
of each other.

00:04:00.689 --> 00:04:03.060
So doing this either way
gives you the same numbers,

00:04:03.060 --> 00:04:04.620
just with different shapes.

00:04:04.620 --> 00:04:06.360
That means you can
choose either option

00:04:06.360 --> 00:04:08.820
based on the dimensions
you want in your result.

00:04:08.819 --> 00:04:09.819
OK, that worked.

00:04:09.819 --> 00:04:12.000
But what if the
original matrices have

00:04:12.000 --> 00:04:13.979
their data arranged as columns?

00:04:13.979 --> 00:04:16.480
In that case,
neither option works.

00:04:16.480 --> 00:04:17.550
Let's see why not.

00:04:17.550 --> 00:04:19.889
If we used a transpose
of the second matrix,

00:04:19.889 --> 00:04:22.829
we end up combining the wrong
elements with our dot products.

00:04:22.829 --> 00:04:25.169
See, if we look at this
row in this column,

00:04:25.170 --> 00:04:28.014
we end up multiplying
the 1 and the 0,

00:04:28.014 --> 00:04:29.430
which are each
from the first data

00:04:29.430 --> 00:04:31.319
items in the original matrix.

00:04:31.319 --> 00:04:34.459
But then we'd add that
to the product of the 2

00:04:34.459 --> 00:04:38.609
and the 3, which are each
values in the second data items.

00:04:38.610 --> 00:04:41.050
So each dot product you take
while multiplying these two

00:04:41.050 --> 00:04:44.819
matrices ends up combining
values from every data item,

00:04:44.819 --> 00:04:47.399
rather than combining
elements of related items,

00:04:47.399 --> 00:04:49.229
like we probably intended.

00:04:49.230 --> 00:04:51.900
This is like what I described
earlier, where maybe now we're

00:04:51.899 --> 00:04:54.029
looking at the heights
of all the people,

00:04:54.029 --> 00:04:57.089
instead of looking at all
the data for just one person.

00:04:57.089 --> 00:04:59.659
OK, so taking the transpose
of the 4 by 2 matrix

00:04:59.660 --> 00:05:01.270
won't give us the
answer we expect.

00:05:01.269 --> 00:05:02.979
But what about
the second option?

00:05:02.980 --> 00:05:05.020
Here, we use the transpose
of the first matrix,

00:05:05.019 --> 00:05:06.250
and then swap them.

00:05:06.250 --> 00:05:08.579
But it gives us
the same problem,

00:05:08.579 --> 00:05:11.740
data arranged as columns on the
left and as rows on the right.

00:05:11.740 --> 00:05:13.930
How about if the
original 3 by 2 matrix

00:05:13.930 --> 00:05:16.689
had been arranged as rows
and the 4 by 2 matrix

00:05:16.689 --> 00:05:18.021
had been columns?

00:05:18.021 --> 00:05:19.480
That actually makes
sense, since we

00:05:19.480 --> 00:05:21.021
were trying to do
this multiplication

00:05:21.021 --> 00:05:22.189
in the first place.

00:05:22.189 --> 00:05:25.089
Unfortunately, neither
solution works here either.

00:05:25.089 --> 00:05:27.310
The first gives us
rows times rows.

00:05:27.310 --> 00:05:30.040
And the second gives us
columns times columns.

00:05:30.040 --> 00:05:31.600
What about the
final possibility,

00:05:31.600 --> 00:05:35.410
where the original 3 by 2 matrix
had been arranged as columns,

00:05:35.410 --> 00:05:37.570
and the 4 by 2
matrix had been rows?

00:05:37.569 --> 00:05:41.550
That gives us columns times
rows or columns times columns.

00:05:41.550 --> 00:05:43.300
Either way, it's not
giving you the answer

00:05:43.300 --> 00:05:44.185
you were looking for.

00:05:44.185 --> 00:05:46.060
So it looks like the
only time you can safely

00:05:46.060 --> 00:05:48.490
use a transpose in a
matrix multiplication

00:05:48.490 --> 00:05:50.889
is if the data in both
of your original matrices

00:05:50.889 --> 00:05:52.360
is arranged as rows.

00:05:52.360 --> 00:05:54.400
Now, I'm not actually
trying to say you always

00:05:54.399 --> 00:05:55.839
need to store data as rows.

00:05:55.839 --> 00:05:58.119
Sometimes it will make
more sense as columns.

00:05:58.120 --> 00:06:00.280
But just remember, if
you run into a situation

00:06:00.279 --> 00:06:02.199
where it looks like
using a transpose will

00:06:02.199 --> 00:06:03.439
help make some math work--

00:06:03.439 --> 00:06:05.654
and you will definitely
run into the situation--

00:06:05.654 --> 00:06:07.779
then you need to stop and
really think about what's

00:06:07.779 --> 00:06:09.189
in each of your matrices.

00:06:09.189 --> 00:06:11.139
Make sure you know which
rows and columns need

00:06:11.139 --> 00:06:14.139
to interact with each other,
and then only use transposes

00:06:14.139 --> 00:06:16.938
if they don't mess
any of that up.

