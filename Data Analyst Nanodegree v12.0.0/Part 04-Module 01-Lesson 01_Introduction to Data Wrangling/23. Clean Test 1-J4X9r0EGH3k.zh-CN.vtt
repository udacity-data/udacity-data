WEBVTT
Kind: captions
Language: zh-CN

00:00:00.060 --> 00:00:05.469
现在 到了编程数据清理的测试部分

00:00:05.469 --> 00:00:08.794
测试可在对各项操作编码后立即进行

00:00:08.794 --> 00:00:10.660
比如给出一个定义

00:00:10.660 --> 00:00:12.250
然后将定义转换成代码

00:00:12.250 --> 00:00:17.550
然后 立即进行如下测试 这可将此标题转换成代码 然后测试

00:00:17.550 --> 00:00:21.219
但这节课 我将把测试部分分离出来

00:00:21.219 --> 00:00:26.619
好 测试可肉眼进行 以便简单修复 比如修改列标题

00:00:26.620 --> 00:00:30.200
这也是我们的第一个问题

00:00:30.199 --> 00:00:32.019
找出所有非描述性和拼写错误的列标题

00:00:32.020 --> 00:00:34.950
并用完整单词替换它们

00:00:34.950 --> 00:00:39.070
要进行肉眼检查 我们只需键入 df_clean 然后查看 DataFrame

00:00:39.070 --> 00:00:41.030
滚动查看

00:00:41.030 --> 00:00:44.329
好 application procedure (申请步骤)

00:00:44.329 --> 00:00:48.159
以前是 applicationP 所以我们已经修复

00:00:48.159 --> 00:00:51.864
about company (公司信息) 以前是 aboutC 我们完成这一步了

00:00:51.865 --> 00:00:54.810
但我们尝试修复的其他两个列标题

00:00:54.810 --> 00:00:57.450
即 requiredqualifications 和 jobrequirements

00:00:57.450 --> 00:01:00.630
隐藏在 Pandas 折叠的列之中

00:01:00.630 --> 00:01:03.165
这就是编程测试派上用场的地方

00:01:03.164 --> 00:01:07.219
我们用 Pandas 的 info 函数来检查隐藏在这里的列

00:01:07.219 --> 00:01:11.179
Info 是我们在评估视频中讲到的编程评估之一

00:01:11.180 --> 00:01:13.605
好了 jobrequirements 已修复

00:01:13.605 --> 00:01:16.484
requiredqualifications 已修复

00:01:16.484 --> 00:01:21.379
大多数情况下 清理代码必须像这样进行编程测试

00:01:21.379 --> 00:01:25.914
我们再次利用编程测试来测试我们的第二次清理操作

00:01:25.915 --> 00:01:29.845
标准化 ASAP 开始日期 真的奏效

00:01:29.844 --> 00:01:32.769
在接下来的测试题中 请使用 Pandas 的 value counts 函数

00:01:32.769 --> 00:01:35.679
来验证所有这些类似短语是否被转换为 ASAP

00:01:35.680 --> 00:01:41.700
并告诉我 Startdate 列中有多少输入项为 ASAP

