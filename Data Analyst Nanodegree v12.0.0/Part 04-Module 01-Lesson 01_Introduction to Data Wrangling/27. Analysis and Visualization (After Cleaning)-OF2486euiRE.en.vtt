WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.685
All right, congratulations.

00:00:01.685 --> 00:00:04.220
You've successfully wrangled a data set.

00:00:04.219 --> 00:00:09.399
You've completed the entire wrangling process from gathering, to assessing,

00:00:09.400 --> 00:00:12.475
and through cleaning your data, which meant defining,

00:00:12.474 --> 00:00:16.195
coding, and testing cleaning operations.

00:00:16.195 --> 00:00:18.984
After we are happy with the state of our data,

00:00:18.984 --> 00:00:21.359
and we are for the purpose of this walkthrough,

00:00:21.359 --> 00:00:22.765
now it's time to act on it.

00:00:22.765 --> 00:00:25.120
Which can mean analysis and visualization,

00:00:25.120 --> 00:00:26.815
which we'll do right now.

00:00:26.815 --> 00:00:30.160
What insights do we want to pull out of this data?

00:00:30.160 --> 00:00:31.765
It's about job postings,

00:00:31.765 --> 00:00:35.770
so maybe one thing that would be useful to know would be the percentage of postings

00:00:35.770 --> 00:00:40.580
that are looking for someone to start urgently, that is ASAP.

00:00:40.579 --> 00:00:42.939
That's one good angle for analysis and we now have

00:00:42.939 --> 00:00:46.149
nicely clean data for that as well in our start date column.

00:00:46.149 --> 00:00:50.244
Because the focus of this course is data wrangling and not data analysis,

00:00:50.244 --> 00:00:53.814
I'm just going to show you how the code works for this analysis here.

00:00:53.814 --> 00:00:55.780
But there'll be a Jupyter Notebook below

00:00:55.780 --> 00:00:58.320
this video for you to do it yourself if you'd like to.

00:00:58.320 --> 00:01:00.064
I encourage you to explore.

00:01:00.064 --> 00:01:02.890
When doing simple calculations like these,

00:01:02.890 --> 00:01:06.430
I like to physically write down the numerator and denominator.

00:01:06.430 --> 00:01:08.630
It helps me to isolate the problem.

00:01:08.629 --> 00:01:15.084
A percentage or fraction has a numerator and denominator.

00:01:15.084 --> 00:01:16.939
Again, we're looking for percentage of postings that

00:01:16.939 --> 00:01:18.965
are looking for someone to start urgently,

00:01:18.965 --> 00:01:22.210
that is ASAP. There we go.

00:01:22.209 --> 00:01:27.059
Number of ASAP start dates divided by number of non-empty start dates.

00:01:27.060 --> 00:01:29.019
All right, so here's how the code works.

00:01:29.019 --> 00:01:33.783
We can use value_counts function again and pick out this ASAP count,

00:01:33.784 --> 00:01:38.719
6,856, which we should see here, and boom, great.

00:01:38.719 --> 00:01:40.230
That's our numerator.

00:01:40.230 --> 00:01:42.030
And for the non-empty counts,

00:01:42.030 --> 00:01:43.823
we can just use the count function.

00:01:43.822 --> 00:01:48.264
This excludes all of the NaN entries, 9,675.

00:01:48.265 --> 00:01:53.560
That should be the same value we see in our info function, and yes.

00:01:53.560 --> 00:01:58.670
StartDate, 9,675, non-null objects.

00:01:58.670 --> 00:02:03.254
Non-null meaning non-empty or non-NaN.

00:02:03.254 --> 00:02:07.459
And all we have to do now is divide the two, numerator by denominator,

00:02:07.459 --> 00:02:12.259
and okay, approximately 71% of job postings have an urgent start date.

00:02:12.259 --> 00:02:15.000
Wow, okay, that's way higher than I would have guessed.

00:02:15.000 --> 00:02:17.509
It would be awesome if we could make a chart showing

00:02:17.509 --> 00:02:20.245
the distribution of start dates in the data.

00:02:20.245 --> 00:02:22.740
That's where visualization comes in.

00:02:22.740 --> 00:02:25.340
Let's convert this analysis to a vis.

00:02:25.340 --> 00:02:28.189
We'll create a pie chart and yes,

00:02:28.189 --> 00:02:30.609
pie charts are okay sometimes.

00:02:30.610 --> 00:02:32.790
Again, I'll walk you through the code here since

00:02:32.789 --> 00:02:35.400
this course isn't about data visualization.

00:02:35.400 --> 00:02:37.230
There again will be opportunity to code

00:02:37.229 --> 00:02:41.229
along in the Jupyter Notebook below this video though, if you want to.

00:02:41.229 --> 00:02:43.780
Okay, so here's our visualization code.

00:02:43.780 --> 00:02:49.034
Again, using our value_counts function and we attach this plot function.

00:02:49.034 --> 00:02:51.115
We want a pie chart and press shift enter,

00:02:51.115 --> 00:02:53.080
and that should be it. Actually, I lied.

00:02:53.080 --> 00:02:55.090
We need to put this little bit of code here first to

00:02:55.090 --> 00:02:58.015
display the plots within our notebook,

00:02:58.014 --> 00:02:59.619
and there is our pie chart.

00:02:59.620 --> 00:03:04.090
It's pretty ugly though because there are so many labels here addressing

00:03:04.090 --> 00:03:09.330
every single entry in the value counts output which you can see up here.

00:03:09.330 --> 00:03:12.850
There's so many. So, we'll import a library called numpy,

00:03:12.849 --> 00:03:15.724
short form or alias, np.

00:03:15.724 --> 00:03:18.009
Then we'll create a custom array of

00:03:18.009 --> 00:03:22.799
labels and this array will have the same length as our value_counts output.

00:03:22.800 --> 00:03:26.715
The array will start off empty or i.e.

00:03:26.715 --> 00:03:30.094
this empty string here with type object.

00:03:30.094 --> 00:03:32.229
This gets into the nitty gritty details of

00:03:32.229 --> 00:03:35.424
numpy so don't stress if this doesn't make sense to you currently.

00:03:35.425 --> 00:03:37.900
And let's make the first label in that array,

00:03:37.900 --> 00:03:41.950
ASAP, because the first entry is ASAP here.

00:03:41.949 --> 00:03:43.844
And check out that vis.

00:03:43.844 --> 00:03:49.000
That's a lot of urgent postings, 71% approximately.

