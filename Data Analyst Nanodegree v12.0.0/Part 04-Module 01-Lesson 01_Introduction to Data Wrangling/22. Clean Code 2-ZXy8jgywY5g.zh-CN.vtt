WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.080
好的 我们现在就来解决这个有趣的问题

00:00:03.080 --> 00:00:06.230
在此之后 你肯定会觉得自己像个魔术师

00:00:06.230 --> 00:00:09.160
我们必须识别 Startdate 列中的所有记录

00:00:09.160 --> 00:00:12.535
该列包含 as soon as possible

00:00:12.535 --> 00:00:15.025
immediately 和类似词语

00:00:15.025 --> 00:00:19.329
然后 我们必须用 ASAP 替换文本及所有单元格

00:00:19.329 --> 00:00:21.829
但它的其它版本是什么呢？

00:00:21.829 --> 00:00:24.279
我们通过对 df_clean DataFrame中的 Startdate 列使用 Pandas 的 value_counts 函数

00:00:24.280 --> 00:00:28.975
来检查最常见的开始日期

00:00:28.975 --> 00:00:33.185
value_counts 是我们之前讲述过的编程评估方式之一

00:00:33.185 --> 00:00:38.530
好的 immediately、as soon as possible immediate、immediate employment

00:00:38.530 --> 00:00:40.307
as soon as possible with a period

00:00:40.307 --> 00:00:46.854
immediate job opportunity我认为这些和 as soon as possible 意思相同

00:00:46.854 --> 00:00:49.074
实际上还有很多

00:00:49.075 --> 00:00:51.310
这里用省略号表示

00:00:51.310 --> 00:00:53.530
在这里 你实际上可以扩展这些结果

00:00:53.530 --> 00:00:56.719
并勾选所有你认为类似的短语

00:00:56.719 --> 00:00:58.945
但我为这堂课做了一些准备工作

00:00:58.945 --> 00:01:01.539
为让你们方便 这里列出了相似的值

00:01:01.539 --> 00:01:05.375
我把这些值粘贴于此

00:01:05.375 --> 00:01:07.275
当你自己进行数据整理时

00:01:07.275 --> 00:01:09.725
你就得自行完成这份苦差事

00:01:09.724 --> 00:01:14.824
所以 请牢记这一点 好了 我们来把这些内容转换成 ASAP

00:01:14.825 --> 00:01:16.870
我们必须得在 Startdate 列中测试各条目

00:01:16.870 --> 00:01:21.079
以便与该清单中的各个项目匹配

00:01:21.079 --> 00:01:24.375
然后 替换确实与 ASAP 匹配的内容

00:01:24.375 --> 00:01:27.625
请注意 列表中的项目必须是字符串

00:01:27.625 --> 00:01:31.135
因为 Startdate 列的数据类型为字符串

00:01:31.135 --> 00:01:34.378
在 Pandas 中也被称作 对象

00:01:34.378 --> 00:01:36.769
dtype(“O”) 其中 O 代表对象

00:01:36.769 --> 00:01:40.414
好的 接下来 我们再进入 Google 看看 Pandas 如何才能帮助我们

00:01:40.415 --> 00:01:43.540
Pandas 替换在 Series 中的值

00:01:43.540 --> 00:01:47.350
在 pandas DataFrame 中 “series”也被称作“列(column)”

00:01:47.349 --> 00:01:52.449
我们想替换 Startdate 列或 Startdate 系列中的值

00:01:52.450 --> 00:01:55.299
那么 在这里 第一条搜索结果实际上就是你即将使用的结果

00:01:55.299 --> 00:01:58.474
但在 Pandas 中有许多方法可以完成这项任务

00:01:58.474 --> 00:02:00.254
不过这是最直截了当的方法

00:02:00.254 --> 00:02:02.759
Pandas.Series.replace

00:02:02.760 --> 00:02:08.140
好了在 pandas 系列上运行数据替换函数

00:02:08.139 --> 00:02:14.079
它用 “value” 或第二个参数替换 “to_replace” 中给出的值 即第一个参数

00:02:14.080 --> 00:02:17.950
需要牢记的另一件事是 这个 inplace 参数

00:02:17.949 --> 00:02:20.905
inplace 的默认值为假

00:02:20.905 --> 00:02:22.840
实际上 我们将把它转化成真

00:02:22.840 --> 00:02:24.270
所以 我们只能尽量减少代码

00:02:24.270 --> 00:02:26.215
你马上就会明白它的工作原理

00:02:26.215 --> 00:02:28.884
好 我们把它记录至 Jupyter Notebook 中

00:02:28.884 --> 00:02:30.549
df_clean.StartDate 是

00:02:30.550 --> 00:02:34.625
我们的系列 我们想在这个系列上使用 .replace

00:02:34.625 --> 00:02:37.870
inplace 真值是指我们只能在这里写这行代码

00:02:37.870 --> 00:02:41.819
并执行这行代码 它所产生的变化将反映在 df_clean 中

00:02:41.819 --> 00:02:43.659
如果此处没有 inplace 真值

00:02:43.659 --> 00:02:47.210
我们就必须将此函数的结果重新赋给 Startdate 列

00:02:47.210 --> 00:02:50.585
好了 因为有如此多的短语与 ASAP 相似

00:02:50.585 --> 00:02:54.655
我们就需要使用 for 循环来减少代码重复

00:02:54.655 --> 00:02:58.300
for 循环的主体就是这个 .replace 函数

00:02:58.300 --> 00:03:02.130
代码的剩余部分就是你在接下来的测试题中的任务了

00:03:02.129 --> 00:03:05.949
编写一个 for 循环 在这行代码中填写参数 

00:03:05.949 --> 00:03:10.329
以便用 ASAP 替换各个与 ASAP 相似的短语

