WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.660
我们将对 Startdate 列使用 value_counts

00:00:03.660 --> 00:00:09.669
现在 我们 Startdate 列有 6,856 个条目 它们的值为 ASAP

00:00:09.669 --> 00:00:14.189
在此输出结果中 根本看不到 ASAP 列表中的所有这些短语

00:00:14.189 --> 00:00:17.564
然而 因为 Pandas 隐藏了部分条目

00:00:17.565 --> 00:00:20.515
所以 我们不能只根据这个输出结果

00:00:20.515 --> 00:00:22.260
完全肯定所有问题都已修复

00:00:22.260 --> 00:00:25.860
展开输出 滚动查看所有条目

00:00:25.859 --> 00:00:27.550
会浪费我们的时间

00:00:27.550 --> 00:00:28.785
在这类情况下

00:00:28.785 --> 00:00:33.365
我们可以借鉴软件测试的技术 即 assert 语句

00:00:33.365 --> 00:00:35.579
这是另一种编程评估

00:00:35.579 --> 00:00:37.979
Assert 语句是这样的

00:00:37.979 --> 00:00:42.484
Assert 逻辑语句 评估真值或假值

00:00:42.484 --> 00:00:45.210
比如 二加二等于五

00:00:45.210 --> 00:00:46.715
显然是假的

00:00:46.715 --> 00:00:49.125
当 Python 遇到一个像这样的 assert 语句

00:00:49.125 --> 00:00:51.359
如果逻辑语句为假

00:00:51.359 --> 00:00:53.880
Python 将显示 AssertionError

00:00:53.880 --> 00:00:56.609
以提醒我们测试对象不为真

00:00:56.609 --> 00:01:01.262
这时候 我们会尝试看看哪方面出错 即 AssertionError

00:01:01.262 --> 00:01:03.914
二加二等于五非真

00:01:03.914 --> 00:01:07.015
如果该语句为真 则不会发生任何事情

00:01:07.015 --> 00:01:09.284
assert 语句不会返回什么好结果

00:01:09.284 --> 00:01:13.674
我们将利用 assert 语句来测试第二项清理操作是否奏效

00:01:13.674 --> 00:01:15.926
重申一下 当我们在清理的时候

00:01:15.927 --> 00:01:19.155
我们必须编写一个 for 循环 因为这里有如此多的条目

00:01:19.155 --> 00:01:21.150
测试时 你也必须做同样的事情

00:01:21.150 --> 00:01:23.434
复制、粘贴 for 循环的结构

00:01:23.433 --> 00:01:26.375
把它放在这里 删掉这个

00:01:26.375 --> 00:01:28.034
在接下来的练习题中

00:01:28.034 --> 00:01:31.424
验证 ASAP 列表中与 ASAP 类似的所有短语

00:01:31.424 --> 00:01:33.780
实际上都已通过这个循环主体中的 assert 语句

00:01:33.780 --> 00:01:37.000
转换成 ASAP

