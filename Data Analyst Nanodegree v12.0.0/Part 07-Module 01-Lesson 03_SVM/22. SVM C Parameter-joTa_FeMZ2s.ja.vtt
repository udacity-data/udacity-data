WEBVTT
Kind: captions
Language: ja

00:00:00.260 --> 00:00:04.059
もう一つSVMにおいて重要なパラメーターがCパラメータです。

00:00:04.059 --> 00:00:05.490
Cは何をするのでしょう？

00:00:05.490 --> 00:00:09.070
Cは「境界線の滑らかさ」と「より多くのデータを正確に分類する」

00:00:09.070 --> 00:00:11.930
というトレードオフをコントロールします。

00:00:11.930 --> 00:00:14.410
例えばこのようなデータがあるとしましょう。

00:00:14.410 --> 00:00:17.100
gammaで見たように、正しい境界線というものは

00:00:17.100 --> 00:00:20.730
たくさん色々な種類が存在します。

00:00:20.730 --> 00:00:22.930
このように直線に近い境界線も引けますが

00:00:22.930 --> 00:00:26.210
代わりにいくつか分類ミスが発生します。

00:00:26.210 --> 00:00:29.940
逆にこのように凸凹した境界線を引く代わりに

00:00:29.940 --> 00:00:33.980
全てのデータを正しく分類できるかもしれません。

00:00:33.980 --> 00:00:36.580
もちろんこれは、とても難しいトレードオフの問題です。

00:00:36.580 --> 00:00:38.300
この線のように複雑です。

00:00:38.300 --> 00:00:40.550
複雑な境界線を引いても大丈夫かどうかは

00:00:40.550 --> 00:00:43.450
テスト用データを推定する際に、一般化が必要かどうかによります。

00:00:43.450 --> 00:00:46.020
コードを実行してみれば、境界線がまっすぐになる程

00:00:46.020 --> 00:00:48.390
テスト用データで推定した際の

00:00:48.390 --> 00:00:50.140
成功率も上がることに気がつくでしょう。

00:00:50.140 --> 00:00:51.670
さてここでクイズです。

00:00:51.670 --> 00:00:53.570
これは少し難しい問題です。

00:00:53.570 --> 00:00:57.330
ドキュメントを読んだり、プレイグラウンドでコードを試したりしないと

00:00:57.330 --> 00:00:59.110
答えにたどり着けないでしょう。

00:00:59.110 --> 00:01:02.240
もしCを大きな値にしたらどうなるでしょうか。

00:01:02.240 --> 00:01:05.390
より滑らかな境界線を得るでしょうか？

00:01:05.390 --> 00:01:08.480
それともより多くのデータを正しく分類するための、凸凹した境界線になるでしょうか。

00:01:08.480 --> 00:01:09.940
これはトレードオフです。

00:01:09.940 --> 00:01:12.820
繰り返しますが、正解にたどり着くためにはGoogleで検索するか

00:01:12.820 --> 00:01:15.480
sklearnのドキュメントを読む必要があります。

00:01:15.480 --> 00:01:17.150
より冒険心があって

00:01:17.150 --> 00:01:19.910
実際にコードを動かして試したい人は

00:01:19.910 --> 00:01:23.860
プレイグラウンドを使って、結果を可視化しても良いです。

00:01:23.860 --> 00:01:26.610
プレイグラウンドは前のレッスンのものを使ってください。

00:01:26.610 --> 00:01:30.390
NaiveBayesで境界線を引いた時のものがあるはずです。

00:01:30.390 --> 00:01:34.140
Udacityのインタプリタが可視化を実行してくれます。

00:01:34.140 --> 00:01:35.880
NaiveBayesを実行する代わりに

00:01:35.880 --> 00:01:37.770
SVMを使って

00:01:37.770 --> 00:01:41.470
クイズのCパラメータを指定してください。

00:01:41.470 --> 00:01:44.630
これは専門的な知識になりますが、rbfをkernelオプションに使うと

00:01:44.630 --> 00:01:49.140
違いがはっきりします。Cパラメータの影響をより大きく受けるからです。

