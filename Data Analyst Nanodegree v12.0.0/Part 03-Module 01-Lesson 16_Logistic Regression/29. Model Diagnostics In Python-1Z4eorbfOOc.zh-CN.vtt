WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.310
与上节课类似

00:00:02.310 --> 00:00:06.089
我们将要使用机器学习库 Scikit-learn 进行模型诊断

00:00:06.089 --> 00:00:09.750
使用之前你在 Python 中完成上次测验的导入数据

00:00:09.750 --> 00:00:11.324
在接下来的页面中

00:00:11.324 --> 00:00:14.994
你要完成这些操作 确保独立完成

00:00:14.994 --> 00:00:19.079
这里你可以看到我们已经加载库和必要的数据集

00:00:19.079 --> 00:00:21.659
这是入学的数据集

00:00:21.660 --> 00:00:25.545
然后你会看到我们使用过的衡量标准

00:00:25.545 --> 00:00:28.230
然后使用逻辑回归作为模型

00:00:28.230 --> 00:00:29.894
我导入了 Scikit-learn

00:00:29.894 --> 00:00:32.159
导入训练 测试和拆分

00:00:32.159 --> 00:00:34.674
正如你上节课最后所做的

00:00:34.674 --> 00:00:38.304
首先我们拆分数据集 训练和测试数据

00:00:38.304 --> 00:00:44.994
同时我也希望像这样完成 X 和 Y 部分

00:00:44.994 --> 00:00:48.959
Y 表示是否入学

00:00:48.960 --> 00:00:53.250
X 表示其余部分

00:00:53.250 --> 00:00:56.094
所以我们这里创建声望 (prestige) 作为虚拟变量

00:00:56.094 --> 00:00:58.589
这样你可以看到我增加了 4 个等级

00:00:58.590 --> 00:01:02.810
传递了声望 (prestige) 部分 从 4 个中挑选 1 个

00:01:02.810 --> 00:01:04.890
进行编码 作为单独一列

00:01:04.890 --> 00:01:08.250
然后我删除其中一列

00:01:08.250 --> 00:01:11.665
然后通过 1 和 2 得到一个四环矩阵

00:01:11.665 --> 00:01:13.780
这里你可以指定随机状态

00:01:13.780 --> 00:01:16.165
每次运行时都可以得到相同结果

00:01:16.165 --> 00:01:19.350
可以看到我们得到了 4 部分

00:01:19.349 --> 00:01:22.459
现在我们要对训练集完成操作

00:01:22.459 --> 00:01:23.989
与上节课类似

00:01:23.989 --> 00:01:28.669
你可以通过各种方式改变数据 更好地预测反应变量

00:01:28.670 --> 00:01:31.129
不过 这个视频的目的只是

00:01:31.129 --> 00:01:34.049
要观察 Scikit-learn 中可以得到的矩阵

00:01:34.049 --> 00:01:36.394
我们来拟合模型和训练的数据

00:01:36.394 --> 00:01:39.420
然后观察它是否较好地完成测试数据

00:01:39.420 --> 00:01:41.150
所以第一步是拟合模型

00:01:41.150 --> 00:01:43.150
就是要用具体例证说明模型

00:01:43.150 --> 00:01:47.135
这里我指定使用默认参数

00:01:47.135 --> 00:01:48.829
如果我们深入了解

00:01:48.829 --> 00:01:52.459
你会发现它们可以指定各种内容

00:01:52.459 --> 00:01:58.309
我们只想使用特殊案例中的默认值

00:01:58.310 --> 00:02:00.650
不过 你可以采取多种方式

00:02:00.650 --> 00:02:03.395
选择最适合的内容

00:02:03.394 --> 00:02:09.019
然后我们要使用训练数据拟合模型

00:02:09.020 --> 00:02:13.015
所以你指定 X 训练

00:02:13.014 --> 00:02:18.954
我们来看一下这个拟合

00:02:18.955 --> 00:02:22.630
首先请求 X 其次是 Y

00:02:22.629 --> 00:02:26.805
所以先训练 X 然后训练 Y

00:02:26.805 --> 00:02:28.540
我们拟合模型

00:02:28.539 --> 00:02:31.599
然后进行预测

00:02:31.599 --> 00:02:34.719
接着我们拟定 Y preds

00:02:34.719 --> 00:02:40.405
我们对测试数据进行预测

00:02:40.405 --> 00:02:46.375
然后使用 X 测试数据完成预测

00:02:46.375 --> 00:02:48.400
基本来说 我们可以使用任一矩阵

00:02:48.400 --> 00:02:51.901
观察模型是否较好地完成任务

00:02:51.901 --> 00:02:53.500
如果你看到这样的内容

00:02:53.500 --> 00:02:56.004
精确度分数和召回率分数

00:02:56.004 --> 00:02:59.229
你会发现得到的第一个参数值是正确的响应值

00:02:59.229 --> 00:03:01.750
第二个参数值是预测值

00:03:01.750 --> 00:03:04.060
然后回到这里 在这种情况下

00:03:04.060 --> 00:03:06.640
你得到 Y 正确性的精确值

00:03:06.639 --> 00:03:09.699
以及预测 Y 与其他值的对比

00:03:09.699 --> 00:03:13.104
利用 Sebastian 在之前视频中展示的内容

00:03:13.104 --> 00:03:16.539
所以我们得到精确率分数 召回率分数

00:03:16.539 --> 00:03:17.754
准确率分数

00:03:17.754 --> 00:03:20.514
也得到混淆矩阵

00:03:20.514 --> 00:03:26.309
准确率 最终我们得到了混淆矩阵

00:03:26.310 --> 00:03:27.580
非常棒

00:03:27.580 --> 00:03:32.634
这里你可以看到精确分数约为 67%

00:03:32.634 --> 00:03:36.324
召回率约为 12.5% 并不算大

00:03:36.324 --> 00:03:38.879
准确度约为 63%

00:03:38.879 --> 00:03:40.210
然后是混淆矩阵

00:03:40.210 --> 00:03:43.064
这里是 23 个 0

00:03:43.064 --> 00:03:46.300
你预测了其中 23 个实际上是 0

00:03:46.300 --> 00:03:48.020
下面这个说明

00:03:48.020 --> 00:03:49.730
在预测的这些中

00:03:49.729 --> 00:03:51.834
其中两个是 1

00:03:51.835 --> 00:03:56.200
下面这部分是预测

00:03:56.199 --> 00:03:57.994
上面这里是实际情况

00:03:57.995 --> 00:04:00.284
可以确定这是正确的 我们可以进行验证

00:04:00.284 --> 00:04:03.835
所以预测位于这个轴的下方

00:04:03.835 --> 00:04:05.495
实际情况位于上方

00:04:05.495 --> 00:04:09.759
这里预测为 0 1

00:04:09.759 --> 00:04:12.819
实际也是 0 1

00:04:12.819 --> 00:04:15.264
所以这些是正确的 0

00:04:15.264 --> 00:04:19.810
这 23 个是我们预测为 0 实际上也是 0

00:04:19.810 --> 00:04:22.509
这些是我们预测为 1 实际上是 0

00:04:22.509 --> 00:04:25.435
这些是我们预测为 0 实际上是 1

00:04:25.435 --> 00:04:27.814
这些是我们预测为 1 实际上是 1

00:04:27.814 --> 00:04:29.500
非常棒 掌握这些内容

00:04:29.500 --> 00:04:31.290
你可以学习下一部分了

